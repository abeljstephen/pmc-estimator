<!DOCTYPE html>
<html>
 <head>
 <base target="_top">
 <style>
 body {
 font-family: Arial, sans-serif;
 padding: 1em;
 }
 .tab {
 overflow: hidden;
 border-bottom: 1px solid #ccc;
 margin-bottom: 1em;
 }
 .tab button {
 background-color: #f1f1f1;
 float: left;
 border: none;
 outline: none;
 cursor: pointer;
 padding: 10px 20px;
 transition: background-color 0.3s;
 font-size: 16px;
 }
 .tab button:hover {
 background-color: #ddd;
 }
 .tab button.active {
 background-color: #2c5282;
 color: white;
 }
 .tab button:disabled {
 cursor: not-allowed;
 opacity: 0.5;
 }
 .tabcontent {
 display: none;
 padding: 6px 12px;
 border: 1px solid #ccc;
 border-top: none;
 }
 #SubmitEstimates {
 display: block;
 }
 iframe {
 width: 100%;
 height: 800px;
 border: none;
 display: block;
 }
 @media (max-width: 600px) {
 table, input, button {
 font-size: 14px;
 }
 iframe {
 height: 500px;
 }
 }
 table {
 width: 100%;
 border-collapse: collapse;
 margin-bottom: 0.5em;
 }
 th, td {
 border: 1px solid #ddd;
 padding: 8px;
 text-align: left;
 }
 th {
 background-color: #2c5282;
 color: white;
 }
 input[type="text"], input[type="number"] {
 width: 100%;
 padding: 5px;
 box-sizing: border-box;
 }
 button {
 padding: 0.5em 1em;
 background-color: #2c5282;
 color: white;
 border: none;
 border-radius: 4px;
 cursor: pointer;
 margin-right: 10px;
 }
 button:hover {
 background-color: #1a365d;
 }
 #results {
 margin-top: 1em;
 }
 #results p {
 font-size: 14px;
 color: #333;
 }
 #loading, #dashboardLoading {
 display: none;
 margin-top: 1em;
 font-size: 14px;
 color: #333;
 text-align: center;
 }
 #progressBarContainer, #dashboardProgressContainer {
 width: 100%;
 background-color: #f0f0f0;
 border-radius: 4px;
 overflow: hidden;
 margin-top: 5px;
 }
 #progressBar, #dashboardProgressBar {
 width: 0%;
 height: 20px;
 background-color: #2c5282;
 transition: width 0.1s linear;
 }
 .error {
 color: red;
 font-size: 12px;
 }
 .info {
 color: #333;
 font-size: 14px;
 margin-bottom: 0.5em;
 }
 .success {
 color: green;
 font-size: 14px;
 margin-top: 1em;
 }
 .tooltip {
 position: relative;
 display: inline-block;
 cursor: help;
 }
 .tooltip .tooltiptext {
 visibility: hidden;
 width: 200px;
 background-color: #555;
 color: #fff;
 text-align: center;
 border-radius: 6px;
 padding: 5px;
 position: absolute;
 z-index: 1;
 bottom: 125%;
 left: 50%;
 margin-left: -100px;
 opacity: 0;
 transition: opacity 0.3s;
 }
 .tooltip:hover .tooltiptext {
 visibility: visible;
 opacity: 1;
 }
 #version {
 font-size: 12px;
 color: #666;
 margin-top: 1em;
 }
 #projectName {
 margin-bottom: 1em;
 }
 </style>
 </head>
 <body>
 <div class="tab">
 <button class="tablinks active" onclick="openTab(event, 'SubmitEstimates')">Submit Estimates</button>
 <button class="tablinks" id="dashboardTab" onclick="openTab(event, 'Dashboard')" disabled>Dashboard</button>
 </div>

 <div id="SubmitEstimates" class="tabcontent">
 <h3>Batch Estimate Input</h3>
 <div id="projectName" class="info"></div>
 <p>Enter your task estimates in the table below. Select one task for plotting in the Dashboard tab.</p>
 <div id="noTasksMessage" class="info" style="display: none;">
 No tasks provided. Please enter your task estimates below or check your input in the chatbot.
 </div>
 <table id="taskTable">
 <thead>
 <tr>
 <th><span class="tooltip">Select for Plot<span class="tooltiptext">Choose one task to visualize in the Dashboard tab.</span></span></th>
 <th><span class="tooltip">Task Name<span class="tooltiptext">Alphanumeric name (e.g., Design_Phase).</span></span></th>
 <th><span class="tooltip">Best Case<span class="tooltiptext">Lowest estimate (time, cost, effort).</span></span></th>
 <th><span class="tooltip">Most Likely<span class="tooltiptext">Realistic estimate.</span></span></th>
 <th><span class="tooltip">Worst Case<span class="tooltiptext">Highest estimate.</span></span></th>
 </tr>
 </thead>
 <tbody id="taskTableBody">
 </tbody>
 </table>
 <button onclick="addRow()">Add Task</button>
 <button id="submitButton" onclick="submitBatch()">Estimate Project</button>
 <button onclick="clearForm()">Clear Form</button>
 <a href="https://www.math3ma.institute/journal/june2025-stephen" target="_blank" style="margin-left: 10px;">Learn More</a>
 <div id="errorMessage" class="error"></div>
 <div id="loading">
 <p>Our expert systems are processing, please wait...</p>
 <div id="progressBarContainer">
 <div id="progressBar"></div>
 </div>
 </div>
 <div id="results">
 <p><strong>Results:</strong></p>
 <p id="sheetUrl"><button id="sheetButton" style="display: none;" onclick="openSheetUrl()">Open Spreadsheet (you may be prompted to log in to Google)</button></p>
 <p id="successMessage" class="success" style="display: none;">Results ready! View metrics in the Spreadsheet or explore plots in the Dashboard tab.</p>
 </div>
 <p id="version">Version 30 - July 15, 2025</p>
 </div>

 <div id="Dashboard" class="tabcontent">
 <div id="dashboardLoading">
 <p>Loading dashboard, please wait...</p>
 <div id="dashboardProgressContainer">
 <div id="dashboardProgressBar"></div>
 </div>
 </div>
 <iframe id="plotIframe" src="" onload="hideDashboardLoading()"></iframe>
 </div>

 <script>
 let sheetUrl = '';
 let plotUrl = '';

 function openTab(evt, tabName) {
 const tabcontent = document.getElementsByClassName('tabcontent');
 for (let i = 0; i < tabcontent.length; i++) {
 tabcontent[i].style.display = 'none';
 }
 const tablinks = document.getElementsByClassName('tablinks');
 for (let i = 0; i < tablinks.length; i++) {
 tablinks[i].className = tablinks[i].className.replace(' active', '');
 }
 document.getElementById(tabName).style.display = 'block';
 evt.currentTarget.className += ' active';
 }

 function hideDashboardLoading() {
 document.getElementById('dashboardLoading').style.display = 'none';
 }

 function getQueryParam(param) {
 const urlParams = new URLSearchParams(window.location.search);
 return urlParams.get(param);
 }

 function sanitizeTaskName(name) {
 return (name || '').replace(/[^a-zA-Z0-9_]/g, '_').substring(0, 50) || 'Task';
 }

 function populateTable() {
 const tasksParam = getQueryParam('tasks');
 const projectName = sanitizeTaskName(getQueryParam('projectName') || 'Project');
 let tasks = [];
 try {
 if (tasksParam) {
 console.log('Raw tasks parameter:', tasksParam);
 tasks = JSON.parse(decodeURIComponent(tasksParam));
 console.log('Parsed tasks:', tasks);
 if (!Array.isArray(tasks) || tasks.length === 0 || tasks.length > 10) {
 throw new Error('Tasks must be a non-empty array with 1-10 tasks');
 }
 tasks = tasks.map((task, index) => {
 const taskName = sanitizeTaskName(task.taskName) || `Task_${index + 1}`;
 const bestCase = parseFloat(task.bestCase);
 const mostLikely = parseFloat(task.mostLikely);
 const worstCase = parseFloat(task.worstCase);
 const selectedForPlot = !!task.selectedForPlot;
 if (!taskName || 
 isNaN(bestCase) || !isFinite(bestCase) || bestCase < 0 ||
 isNaN(mostLikely) || !isFinite(mostLikely) || mostLikely < 0 ||
 isNaN(worstCase) || !isFinite(worstCase) || worstCase < 0) {
 throw new Error(`Invalid task data at index ${index}: ${JSON.stringify(task)}`);
 }
 if (bestCase > mostLikely || mostLikely > worstCase) {
 throw new Error(`Invalid estimate order at index ${index}: Best Case <= Most Likely <= Worst Case`);
 }
 return { taskName, bestCase, mostLikely, worstCase, selectedForPlot };
 });
 const selectedCount = tasks.filter(task => task.selectedForPlot).length;
 if (selectedCount > 1) {
 throw new Error('Only one task can be selected for plotting');
 }
 if (selectedCount === 0 && tasks.length > 0) {
 tasks[0].selectedForPlot = true;
 }
 }
 document.getElementById('projectName').textContent = `Project: ${projectName}`;
 } catch (e) {
 console.error('Invalid tasks parameter:', e.message);
 document.getElementById('errorMessage').textContent = 'Error loading tasks: ' + e.message + '. Please check your input or try again.';
 document.getElementById('noTasksMessage').style.display = 'block';
 tasks = [];
 }
 const tbody = document.getElementById('taskTableBody');
 tbody.innerHTML = '';
 if (tasks.length > 0) {
 document.getElementById('noTasksMessage').style.display = 'none';
 tasks.forEach((task, index) => {
 const row = tbody.insertRow();
 row.innerHTML = `
 <td><input type="checkbox" name="selectedForPlot" value="${index}" ${task.selectedForPlot ? 'checked' : ''}></td>
 <td><input type="text" value="${task.taskName}" oninput="validateTaskName(this)"></td>
 <td><input type="number" value="${task.bestCase}" step="any" min="0"></td>
 <td><input type="number" value="${task.mostLikely}" step="any" min="0"></td>
 <td><input type="number" value="${task.worstCase}" step="any" min="0"></td>
 `;
 });
 } else {
 document.getElementById('noTasksMessage').style.display = 'block';
 const row = tbody.insertRow();
 row.innerHTML = `
 <td><input type="checkbox" name="selectedForPlot" value="0" checked></td>
 <td><input type="text" value="Task_1" oninput="validateTaskName(this)"></td>
 <td><input type="number" value="0" step="any" min="0"></td>
 <td><input type="number" value="0" step="any" min="0"></td>
 <td><input type="number" value="0" step="any" min="0"></td>
 `;
 }
 enforceSingleSelection();
 }

 function enforceSingleSelection() {
 const checkboxes = document.getElementsByName('selectedForPlot');
 checkboxes.forEach((checkbox, index) => {
 checkbox.addEventListener('change', function() {
 if (this.checked) {
 checkboxes.forEach((otherCheckbox, otherIndex) => {
 if (otherIndex !== index) {
 otherCheckbox.checked = false;
 }
 });
 }
 });
 });
 }

 function validateTaskName(input) {
 const originalValue = input.value;
 const sanitizedValue = sanitizeTaskName(originalValue);
 if (originalValue !== sanitizedValue) {
 input.value = sanitizedValue;
 document.getElementById('errorMessage').textContent = 'Task name adjusted to alphanumeric characters and underscores only.';
 }
 }

 function addRow() {
 const tbody = document.getElementById('taskTableBody');
 const rowCount = tbody.rows.length;
 const row = tbody.insertRow();
 row.innerHTML = `
 <td><input type="checkbox" name="selectedForPlot" value="${rowCount}"></td>
 <td><input type="text" value="Task_${rowCount + 1}" oninput="validateTaskName(this)"></td>
 <td><input type="number" value="0" step="any" min="0"></td>
 <td><input type="number" value="0" step="any" min="0"></td>
 <td><input type="number" value="0" step="any" min="0"></td>
 `;
 enforceSingleSelection();
 }

 function clearForm() {
 if (confirm('Clear all tasks and start a new project?')) {
 document.getElementById('taskTableBody').innerHTML = '';
 document.getElementById('noTasksMessage').style.display = 'block';
 document.getElementById('errorMessage').textContent = '';
 document.getElementById('successMessage').style.display = 'none';
 document.getElementById('sheetButton').style.display = 'none';
 document.getElementById('dashboardTab').disabled = true;
 document.getElementById('plotIframe').src = '';
 sheetUrl = '';
 plotUrl = '';
 addRow();
 }
 }

 function openSheetUrl() {
 if (sheetUrl) window.open(sheetUrl, '_blank');
 }

 function startProgress() {
 const progressBar = document.getElementById('progressBar');
 const loadingDiv = document.getElementById('loading');
 loadingDiv.style.display = 'block';
 let width = 0;
 const interval = setInterval(() => {
 width += 5;
 progressBar.style.width = `${width}%`;
 if (width >= 90) clearInterval(interval);
 }, 200);
 return () => {
 clearInterval(interval);
 progressBar.style.width = '100%';
 setTimeout(() => {
 loadingDiv.style.display = 'none';
 progressBar.style.width = '0%';
 }, 500);
 };
 }

 function startDashboardLoading() {
 const progressBar = document.getElementById('dashboardProgressBar');
 const loadingDiv = document.getElementById('dashboardLoading');
 loadingDiv.style.display = 'block';
 let width = 0;
 const interval = setInterval(() => {
 width += 5;
 progressBar.style.width = `${width}%`;
 if (width >= 90) clearInterval(interval);
 }, 200);
 return () => {
 clearInterval(interval);
 progressBar.style.width = '100%';
 setTimeout(() => {
 loadingDiv.style.display = 'none';
 progressBar.style.width = '0%';
 }, 500);
 };
 }

 let isSubmitting = false;
 function submitBatch() {
 if (isSubmitting) return;
 if (!confirm('Submit tasks for processing? Ensure one task is selected for plotting.')) return;
 isSubmitting = true;
 document.getElementById('submitButton').disabled = true;
 document.getElementById('errorMessage').textContent = '';
 document.getElementById('successMessage').style.display = 'none';
 const stopProgress = startProgress();

 const tbody = document.getElementById('taskTableBody');
 const rows = tbody.rows;
 const estimatesArray = [];
 let selectedIndex = -1;
 let errorMessage = '';

 for (let i = 0; i < rows.length; i++) {
 const row = rows[i];
 const checkbox = row.cells[0].getElementsByTagName('input')[0];
 const taskName = row.cells[1].getElementsByTagName('input')[0].value;
 const bestCase = parseFloat(row.cells[2].getElementsByTagName('input')[0].value);
 const mostLikely = parseFloat(row.cells[3].getElementsByTagName('input')[0].value);
 const worstCase = parseFloat(row.cells[4].getElementsByTagName('input')[0].value);

 if (!taskName.match(/^[a-zA-Z0-9_]+$/)) {
 errorMessage = `Task name in row ${i + 1} must be alphanumeric with underscores only.`;
 break;
 }
 if (isNaN(bestCase) || !isFinite(bestCase) || bestCase < 0) {
 errorMessage = `Best Case in row ${i + 1} must be a non-negative number.`;
 break;
 }
 if (isNaN(mostLikely) || !isFinite(mostLikely) || mostLikely < 0) {
 errorMessage = `Most Likely in row ${i + 1} must be a non-negative number.`;
 break;
 }
 if (isNaN(worstCase) || !isFinite(worstCase) || worstCase < 0) {
 errorMessage = `Worst Case in row ${i + 1} must be a non-negative number.`;
 break;
 }
 if (bestCase > mostLikely || mostLikely > worstCase) {
 errorMessage = `Row ${i + 1}: Best Case ≤ Most Likely ≤ Worst Case required.`;
 break;
 }
 if (bestCase === mostLikely || mostLikely === worstCase) {
 errorMessage = `Row ${i + 1}: Estimates must be distinct.`;
 break;
 }
 const range = worstCase - bestCase;
 const minRange = mostLikely * 0.001;
 if (range < minRange) {
 errorMessage = `Row ${i + 1}: Estimate range too small (Worst - Best < ${minRange}).`;
 break;
 }

 estimatesArray.push({
 taskName: taskName,
 bestCase: bestCase,
 mostLikely: mostLikely,
 worstCase: worstCase,
 selectedForPlot: checkbox.checked
 });

 if (checkbox.checked) {
 selectedIndex = i;
 }
 }

 if (selectedIndex === -1 && estimatesArray.length > 0) {
 errorMessage = 'Please select one task for plotting.';
 }

 const errorDiv = document.getElementById('errorMessage');
 errorDiv.textContent = errorMessage;
 if (errorMessage) {
 stopProgress();
 isSubmitting = false;
 document.getElementById('submitButton').disabled = false;
 return;
 }

 google.script.run
 .withSuccessHandler(function(response) {
 stopProgress();
 if (response.status === 'error' && response.errors && response.errors.length > 0) {
 const errorSummary = response.errors.join('\n');
 if (confirm(`${errorSummary}\n\nPress OK to proceed with "N/A" for invalid rows, or Cancel to stop.`)) {
 // User chose to continue
 sheetUrl = response.sheetUrl;
 plotUrl = response.plotUrl;
 document.getElementById('sheetButton').style.display = 'inline-block';
 document.getElementById('successMessage').style.display = 'block';
 document.getElementById('successMessage').textContent = 'Results ready with "N/A" for invalid rows. View metrics in the Spreadsheet or explore plots in the Dashboard tab.';
 document.getElementById('dashboardTab').disabled = false;
 startDashboardLoading();
 document.getElementById('plotIframe').src = plotUrl;
 } else {
 // User chose to cancel
 document.getElementById('errorMessage').textContent = 'Operation cancelled due to invalid input data.';
 document.getElementById('sheetButton').style.display = 'none';
 document.getElementById('dashboardTab').disabled = true;
 }
 } else {
 // No errors, proceed as normal
 sheetUrl = response.sheetUrl;
 plotUrl = response.plotUrl;
 document.getElementById('sheetButton').style.display = 'inline-block';
 document.getElementById('successMessage').style.display = 'block';
 document.getElementById('successMessage').textContent = 'Results ready! View metrics in the Spreadsheet or explore plots in the Dashboard tab.';
 document.getElementById('dashboardTab').disabled = false;
 startDashboardLoading();
 document.getElementById('plotIframe').src = plotUrl;
 }
 isSubmitting = false;
 document.getElementById('submitButton').disabled = false;
 })
 .withFailureHandler(function(error) {
 stopProgress();
 errorDiv.textContent = 'Error: ' + error.message + '. Try again or contact support.';
 document.getElementById('sheetButton').style.display = 'none';
 document.getElementById('dashboardTab').disabled = true;
 isSubmitting = false;
 document.getElementById('submitButton').disabled = false;
 })
 .createEstimateSheet(estimatesArray);
 }

 populateTable();
 </script>
 </body>
</html>
