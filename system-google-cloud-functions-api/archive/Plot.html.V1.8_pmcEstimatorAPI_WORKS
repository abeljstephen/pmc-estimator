<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Probability Simulator</title>
    <script src="https://www.gstatic.com/charts/loader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js" async></script>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background: #f5f7fa;
            margin: 0;
            padding: 20px;
            transition: all 0.3s ease-in-out;
        }
        .simulator-container {
            max-width: 1200px;
            margin: 0 auto;
            background: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            padding: 20px;
        }
        .step-section {
            margin: 20px 0;
            padding: 15px;
            background: #f9f9f9;
            border-radius: 6px;
            border: 1px solid #e0e0e0;
        }
        h2 {
            font-size: 18px;
            font-weight: bold;
            color: #2c5282;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .step-description {
            font-size: 14px;
            color: #666;
            margin-bottom: 15px;
            line-height: 1.6;
        }
        #loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            font-size: 18px;
            color: #333;
        }
        .control-row {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 10px;
            max-width: 100%;
            flex-wrap: nowrap;
        }
        .control-row label, .control-row select, .control-row input {
            font-size: 12px;
            color: #333;
            white-space: nowrap;
        }
        .control-row div {
            flex-shrink: 0;
        }
        .control-row select, .control-row input[type="number"] {
            padding: 5px;
            border: 1px solid #2c5282;
            border-radius: 4px;
            width: 150px;
        }
        .constrained-button-container {
            display: flex;
            align-items: center;
            border: 2px solid #2c5282;
            border-radius: 6px;
            padding: 10px;
            background: #f9f9f9;
            min-width: 350px;
            max-width: 450px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }
        .constrained-row {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: nowrap;
            width: 100%;
        }
        .value-input-container {
            display: flex;
            align-items: center;
            gap: 5px;
            min-width: 120px;
        }
        #target-input-container {
            display: flex;
        }
        #confidence-input-container {
            display: none;
        }
        .constrained-row label,
        .constrained-row select,
        .constrained-row input {
            font-size: 12px;
            color: #333;
            white-space: nowrap;
        }
        .constrained-row select,
        .constrained-row input[type="number"] {
            padding: 5px;
            border: 1px solid #2c5282;
            border-radius: 4px;
            width: 100px;
            flex-shrink: 0;
        }
        .optimize-container {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .optimize-container label {
            font-size: 12px;
            color: #333;
        }
        .optimize-container select {
            padding: 5px;
            border: 1px solid #2c5282;
            border-radius: 4px;
            width: 150px;
        }
        @media (max-width: 768px) {
            .control-row {
                flex-wrap: wrap;
                gap: 10px;
            }
            .control-row select {
                width: 120px;
            }
            .constrained-button-container {
                min-width: 100%;
                max-width: 100%;
            }
            .constrained-row {
                gap: 5px;
                flex-wrap: wrap;
            }
            .constrained-row select,
            .constrained-row input[type="number"] {
                width: 80px;
            }
            .optimize-container select {
                width: 120px;
            }
        }
        .option {
            padding: 15px;
            background: #ffffff;
            border-radius: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            transition: transform 0.2s ease-in-out;
        }
        .option.active-option {
            border: 2px solid #2c5282;
        }
        .option h3 {
            font-size: 16px;
            font-weight: bold;
            color: #2c5282;
            margin-bottom: 10px;
        }
        .option p {
            font-size: 14px;
            color: #666;
            line-height: 1.6;
        }
        .decision-grid-container {
            display: flex;
            justify-content: space-between;
            gap: 10px;
            margin-bottom: 15px;
        }
        .decision-grid {
            flex: 1;
            text-align: center;
            padding: 8px;
            background: #f9f9f9;
            border-radius: 4px;
        }
        .decision-grid label {
            font-size: 12px;
            color: #333;
        }
        .decision-grid input[type="range"] {
            width: 100%;
            border: 1px solid #2c5282;
            border-radius: 4px;
            padding: 2px;
            background: #ffffff;
            transition: all 0.3s ease-in-out;
        }
        .decision-grid input[type="range"]:hover {
            border-color: #1a365d;
            background: #f0f0f0;
        }
        .decision-grid input[type="range"]:disabled {
            background: #e0e0e0;
            cursor: not-allowed;
        }
        .decision-grid span {
            font-size: 12px;
            color: #333;
        }
        .help-icon {
            font-size: 12px;
            color: #2c5282;
            cursor: help;
            padding: 2px 5px;
            background-color: #f0f0f0;
            border-radius: 50%;
            margin-left: 5px;
            display: inline-block;
        }
        .plot-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
            max-height: 900px;
            overflow-y: auto;
        }
        #pdf-chart, #cdf-chart {
            width: 100%;
            height: 400px;
            position: relative;
        }
        .side-by-side {
            display: flex;
            flex-direction: row;
            gap: 15px;
            max-height: 400px;
        }
        .side-by-side > div {
            flex: 1;
            background: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 3px;
            padding: 8px;
            position: relative;
        }
        .simulator-content {
            display: flex;
            flex-direction: row;
            gap: 20px;
        }
        .simulator-left {
            flex: 0 0 100%;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        .simulator-right {
            display: none;
        }
        .clear-button {
            padding: 5px 10px;
            background-color: #ff4444;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 12px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .clear-button:hover {
            background-color: #cc0000;
        }
        .results-section {
            padding: 15px;
            background: #e6f4ea;
            border: 1px solid #ddd;
            border-left: 3px solid #28a745;
            border-radius: 4px;
            max-height: 300px;
            overflow-y: auto;
        }
        .results-header {
            font-size: 16px;
            font-weight: bold;
            color: #2c5282;
            margin-bottom: 10px;
        }
        .results-text {
            font-size: 14px;
            color: #333;
            line-height: 1.6;
        }
        .dynamic {
            color: #1f77b4;
            font-weight: bold;
        }
        .glow {
            background: linear-gradient(90deg, #ffeb3b, #fff176);
            padding: 2px 4px;
            border-radius: 3px;
            font-weight: bold;
            display: inline-block;
        }
        .use-case {
            position: absolute;
            bottom: 0;
            right: 0;
            font-size: 10px;
            padding: 5px;
            background: #f0f0f0;
            border-radius: 4px 0 0 0;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .use-case-content {
            display: none;
            font-size: 10px;
            color: #666;
            margin: 5px 0;
            padding: 5px;
            line-height: 1.4;
            background: #fff;
            border-radius: 4px;
        }
        .toggle-use-case {
            font-size: 10px;
            font-weight: bold;
            color: #2c5282;
            background: none;
            border: none;
            cursor: pointer;
            padding: 2px 5px;
        }
        .summary-section-container {
            margin: 10px 0;
            padding: 10px;
            background: #ffffff;
            border-radius: 6px;
            box-shadow: 0 1px 4px rgba(0,0,0,0.05);
        }
        .toggle-summary {
            font-size: 14px;
            font-weight: bold;
            color: #ffffff;
            background: #2c5282;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            text-align: left;
        }
        .summary-content {
            display: none;
            flex-direction: column;
            gap: 15px;
            padding: 10px;
        }
        .analysis-wrapper {
            background: #ffffff;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
        }
        .white-box-container {
            background: #fff;
            border-radius: 6px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.05);
            padding: 8px;
            margin-top: 10px;
        }
        #metrics-table-container {
            display: flex;
            flex-direction: column;
            gap: 15px;
            padding: 10px;
            background: #f8f8f8;
            border-radius: 4px;
        }
        #metrics-table-container table {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
        }
        #metrics-table-container th, #metrics-table-container td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
            font-size: 12px;
        }
        #metrics-table-container th {
            background-color: #2c5282;
            color: white;
            font-weight: bold;
        }
        .table-title {
            font-size: 14px;
            font-weight: bold;
            color: #2c5282;
            background-color: #e6eef9;
            padding: 5px;
            border-radius: 3px;
        }
        #combination-table-body td {
            padding: 5px 6px;
            font-size: 10px;
            font-family: Arial, sans-serif;
            white-space: nowrap;
        }
        #combination-table-body td:last-child {
            white-space: normal;
            word-wrap: break-word;
        }
        .dual-value-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 10px;
        }
        .dual-value-table th, .dual-value-table td {
            padding: 5px 6px;
            border: 1px solid #ddd;
            text-align: center;
        }
        .dual-value-table th {
            background: #2c5282;
            color: white;
            font-weight: bold;
        }
        #pagination-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
            margin-top: 8px;
        }
        #pagination-controls button {
            padding: 4px 8px;
            background-color: #2c5282;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        #pagination-controls button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        #page-info {
            font-size: 12px;
            color: #333;
        }
        #back-to-top {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 8px 15px;
            background-color: #2c5282;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: none;
        }
        #recommendations-content p {
            font-size: 14px;
            color: #333;
            line-height: 1.6;
        }
        #recommendations-content ul li {
            font-size: 14px;
            color: #333;
            line-height: 1.6;
            margin-left: 20px;
        }
        #recommendations-content ul li ul li {
            font-size: 14px;
            color: #333;
            line-height: 1.6;
            margin-left: 40px;
        }
    </style>
</head>
<body>
    <div id="loading-overlay">Loading, please wait...</div>
    <div id="probability-simulator" class="simulator-container">
        <!-- Initial Setup / User Choices Section -->
        <div class="step-section" id="initial-setup">
            <h2>Initial Setup / User Choices</h2>
            <p class="step-description">Choose a task and define your target value or confidence level to begin.</p>
            <div class="control-row">
                <div id="task-select-container">
                    <label for="task-select">Select Task:</label>
                    <select id="task-select">
                        <option value="">Loading tasks...</option>
                    </select>
                </div>
                <div class="constrained-button-container">
                    <div class="constrained-row">
                        <div id="mode-select-container">
                            <label for="mode-select">Target Mode:</label>
                            <select id="mode-select">
                                <option value="target">Target</option>
                                <option value="confidence">Confidence</option>
                            </select>
                        </div>
                        <div class="value-input-container" id="target-input-container">
                            <label for="target-value-input">Value (<span id="target-range"></span>):</label>
                            <input type="number" id="target-value-input" style="width: 100px;" value="">
                            <span id="target-value-message" style="color: red; margin-left: 5px;"></span>
                        </div>
                        <div class="value-input-container" id="confidence-input-container" style="display: none;">
                            <label for="confidence-level-input">Value (1-100%):</label>
                            <input type="number" id="confidence-level-input" min="1" max="100" value="90" style="width: 100px;">
                            <span id="confidence-level-message" style="color: red; margin-left: 5px;"></span>
                        </div>
                    </div>
                </div>
                <div id="optimize-container">
                    <label for="optimize-select">Optimize:</label>
                    <select id="optimize-select">
                        <option value="no">No</option>
                        <option value="yes">Yes</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Exploration Results Section -->
        <div class="step-section results-section" id="explore-results">
            <h3 class="results-header">Exploration Results</h3>
            <p class="results-text">Select a mode to view results.</p>
        </div>
        <!-- Interactive Probability Content -->
        <div class="step-section" id="interactive-probability-content">
            <div class="simulator-content">
                <div class="simulator-left">
                    <div class="option" id="option-manual">
                        <h3 id="explore-mode-title">Adjust Sliders to Explore Value at Confidence Level</h3>
                        <div class="decision-grid-container">
                            <div class="decision-grid">
                                <label for="targetBudgetFlexibility">Budget Flexibility (%)</label>
                                <input type="range" id="targetBudgetFlexibility" min="0" max="100" step="1" value="0">
                                <span id="targetBudgetFlexibilityValue">0%</span>
                                <span class="help-icon" title="Higher flexibility allows for a larger budget buffer.">?</span>
                            </div>
                            <div class="decision-grid">
                                <label for="targetScheduleFlexibility">Schedule Flexibility (%)</label>
                                <input type="range" id="targetScheduleFlexibility" min="0" max="100" step="1" value="0">
                                <span id="targetScheduleFlexibilityValue">0%</span>
                                <span class="help-icon" title="Higher flexibility extends the timeline.">?</span>
                            </div>
                            <div class="decision-grid">
                                <label for="targetScopeCertainty">Scope Certainty (%)</label>
                                <input type="range" id="targetScopeCertainty" min="0" max="100" step="1" value="0">
                                <span id="targetScopeCertaintyValue">0%</span>
                                <span class="help-icon" title="Higher certainty reduces outcome range.">?</span>
                            </div>
                            <div class="decision-grid">
                                <label for="targetQualityTolerance">Tolerance for Poor Quality (%)</label>
                                <input type="range" id="targetQualityTolerance" min="0" max="100" step="1" value="0">
                                <span id="targetQualityToleranceValue">0%</span>
                                <span class="help-icon" title="Higher tolerance accepts more defects or lower quality.">?</span>
                            </div>
                        </div>
                        <div class="plot-container">
                            <div class="side-by-side">
                                <div id="pdf-chart" style="width: 100%; height: 400px; position: relative;">
                                    <div id="pdf-use-case" class="use-case">
                                        <button class="toggle-use-case" data-target="pdf-use-case-content" aria-expanded="false">▼ Use Case</button>
                                        <div id="pdf-use-case-content" class="use-case-content">
                                            <p><strong><em>When to Use:</em></strong> Visualize the likelihood of different outcomes and how adjustments affect the distribution.</p>
                                            <p><strong><em>How to Use:</em></strong> Adjust sliders to see distribution changes.</p>
                                            <p><strong><em>How It Helps:</em></strong> Understand the impact of decisions on outcome distribution.</p>
                                        </div>
                                    </div>
                                </div>
                                <div id="cdf-chart" style="width: 100%; height: 400px; position: relative;">
                                    <div id="cdf-use-case" class="use-case">
                                        <button class="toggle-use-case" data-target="cdf-use-case-content" aria-expanded="false">▼ Use Case</button>
                                        <div id="cdf-use-case-content" class="use-case-content">
                                            <p><strong><em>When to Use:</em></strong> Explore cumulative probabilities and how adjustments improve target achievement.</p>
                                            <p><strong><em>How to Use:</em></strong> View baseline and adjusted CDFs to compare outcomes.</p>
                                            <p><strong><em>How It Helps:</em></strong> Guides strategic adjustments for better outcomes.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="white-box-container">
                            <button class="toggle-summary" data-target="slider-impact-reference-guide" aria-expanded="true">▲ Slider Combination</button>
                            <div id="slider-impact-reference-guide" style="display: block; padding: 8px;">
                                <div style="margin-bottom: 5px; text-align: center; display: flex; align-items: center; justify-content: center;">
                                    <label for="probability-filter">Filter:</label>
                                    <select id="probability-filter">
                                        <option value="current" selected>Current Selection</option>
                                        <option value="all">All</option>
                                        <option value="above50">Above 50%</option>
                                        <option value="above75">Above 75%</option>
                                        <option value="below50">Below 50%</option>
                                        <option value="optimized">Optimized</option>
                                    </select>
                                    <span class="help-icon" title="This table shows combinations of slider settings and their probability of achieving the target value. Filter options: 'Current Selection' shows current settings, 'All' shows all combinations, 'Above 50%'/'Above 75%' show combinations with probability above 50%/75%, 'Below 50%' shows below 50%, and 'Optimized' shows the optimal settings. Use the filter to narrow down results, navigate pages, and adjust sliders to test scenarios.">?</span>
                                </div>
                                <table id="combination-table" class="dual-value-table">
                                    <tbody id="combination-table-body">
                                        <tr><td colspan="8">Select a task and settings to view combinations.</td></tr>
                                    </tbody>
                                </table>
                                <div id="pagination-controls">
                                    <button id="prev-page">Prev</button>
                                    <span id="page-info">Page 1</span>
                                    <button id="next-page">Next</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="simulator-right"></div>
            </div>
            <div class="summary-section-container">
                <button class="toggle-summary" data-target="insights-recommendations-content" aria-expanded="false">▼ Insights & Recommendations</button>
                <div id="insights-recommendations-content" class="summary-content" style="display: none;">
                    <div id="recommendations-section">
                        <h4>Recommendations</h4>
                        <div id="recommendations-content"></div>
                    </div>
                    <div id="metrics-table-container" class="white-box-container">
                        <div class="table-title">Statistical Metrics</div>
                        <table id="statistical-metrics-table" class="dual-value-table">
                            <thead>
                                <tr>
                                    <th>Metric</th>
                                    <th>Purpose</th>
                                    <th>General Formula</th>
                                    <th>Formula with Dynamic Variables</th>
                                    <th>Result (Dynamic)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>PERT Mean</td>
                                    <td>Weighted average emphasizing mode</td>
                                    <td>E[X] = (a + 4m + b) / 6</td>
                                    <td>E[X] = (<span class="dynamic" id="pert-a"></span> + 4×<span class="dynamic" id="pert-m"></span> + <span class="dynamic" id="pert-b"></span>) / 6</td>
                                    <td><span class="dynamic" id="pert-mean"></span></td>
                                </tr>
                                <tr>
                                    <td>Triangle Mean</td>
                                    <td>Simple average of estimates</td>
                                    <td>E[X] = (a + m + b) / 3</td>
                                    <td>E[X] = (<span class="dynamic" id="tri-a"></span> + <span class="dynamic" id="tri-m"></span> + <span class="dynamic" id="tri-b"></span>) / 3</td>
                                    <td><span class="dynamic" id="tri-mean"></span></td>
                                </tr>
                                <tr>
                                    <td>Beta Mean</td>
                                    <td>Scaled mean of beta distribution</td>
                                    <td>E[X] = a + (b - a) × α / (α + β)</td>
                                    <td>E[X] = <span class="dynamic" id="beta-a"></span> + (<span class="dynamic" id="beta-b"></span> - <span class="dynamic" id="beta-a"></span>) × 2 / (2 + 5)</td>
                                    <td><span class="dynamic" id="beta-mean"></span></td>
                                </tr>
                                <tr>
                                    <td>MC Unsmoothed Mean</td>
                                    <td>Average of sampled MC values</td>
                                    <td>E[X] = Σ(xᵢ·yᵢ) / Σ(yᵢ)</td>
                                    <td>Sum(xᵢ·yᵢ)/Sum(yᵢ), from raw MC samples</td>
                                    <td><span class="dynamic" id="mc-unsmoothed-mean"></span></td>
                                </tr>
                                <tr>
                                    <td>MC Smoothed Mean</td>
                                    <td>KDE-weighted mean</td>
                                    <td>E[X] = Σ(xᵢ·yᵢ·Δx) / Σ(yᵢ·Δx)</td>
                                    <td>μ = <span class="dynamic" id="mc-smoothed-mean-value"></span> from smoothed KDE distribution</td>
                                    <td><span class="dynamic" id="mc-smoothed-mean"></span></td>
                                </tr>
                                <tr>
                                    <td>MC Smoothed Median</td>
                                    <td>50th percentile of smoothed curve</td>
                                    <td>Median where CDF = 0.5</td>
                                    <td>x such that Σ(yᵢ·Δx) = 0.5 (smoothed CDF midpoint)</td>
                                    <td><span class="dynamic" id="mc-smoothed-median"></span></td>
                                </tr>
                                <tr>
                                    <td>Std Dev (MC Smoothed)</td>
                                    <td>Spread of values around mean</td>
                                    <td>σ = √(Σ((xᵢ - μ)²·yᵢ·Δx)/Σ(yᵢ·Δx))</td>
                                    <td>σ = √(Σ((xᵢ - <span class="dynamic" id="std-mu"></span>)²·yᵢ·Δx)/Σ(yᵢ·Δx))</td>
                                    <td><span class="dynamic" id="std-dev"></span></td>
                                </tr>
                                <tr>
                                    <td>Variance (MC Smoothed)</td>
                                    <td>Dispersion measure</td>
                                    <td>Var = Σ((xᵢ - μ)²·yᵢ·Δx)/Σ(yᵢ·Δx)</td>
                                    <td>Var = Σ((xᵢ - <span class="dynamic" id="var-mu"></span>)²·yᵢ·Δx)/Σ(yᵢ·Δx)</td>
                                    <td><span class="dynamic" id="variance"></span></td>
                                </tr>
                                <tr>
                                    <td>Skewness (MC Smoothed)</td>
                                    <td>Asymmetry of distribution</td>
                                    <td>Skew = (Σ((xᵢ - μ)³·yᵢ·Δx)/Σ(yᵢ·Δx)) / σ³</td>
                                    <td>Skew = (Σ((xᵢ - <span class="dynamic" id="skew-mu"></span>)³·yᵢ·Δx)/Σ(yᵢ·Δx)) / (<span class="dynamic" id="skew-sigma"></span>)³</td>
                                    <td><span class="dynamic" id="skewness"></span></td>
                                </tr>
                                <tr>
                                    <td>Coefficient of Variation</td>
                                    <td>Relative standard deviation</td>
                                    <td>CV = σ / μ</td>
                                    <td>CV = <span class="dynamic" id="cv-sigma"></span> / <span class="dynamic" id="cv-mu"></span></td>
                                    <td><span class="dynamic" id="cv"></span></td>
                                </tr>
                                <tr>
                                    <td>95% Confidence Interval</td>
                                    <td>Range with 95% certainty around mean</td>
                                    <td>CI = μ ± 1.96 × (σ / √n)</td>
                                    <td>CI = <span class="dynamic" id="ci-mu"></span> ± 1.96 × (<span class="dynamic" id="ci-sigma"></span> / √1000)</td>
                                    <td><span class="dynamic" id="ci"></span></td>
                                </tr>
                                <tr>
                                    <td>Value at Risk (VaR @ 95%)</td>
                                    <td>Risk threshold at 95%</td>
                                    <td>VaR = x where P(X > x) = 5%</td>
                                    <td>VaR = <span class="dynamic" id="var-value"></span> (smoothed CDF where tail = 5%)</td>
                                    <td><span class="dynamic" id="var"></span></td>
                                </tr>
                                <tr>
                                    <td>Conditional VaR (CVaR @ 95%)</td>
                                    <td>Expected tail loss beyond VaR</td>
                                    <td>CVaR = E[X | X > VaR]</td>
                                    <td>Mean of xᵢ > <span class="dynamic" id="cvar-var"></span> from smoothed distribution</td>
                                    <td><span class="dynamic" id="cvar"></span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <button id="back-to-top">Back to Top</button>

    <script type="text/javascript">
        // Global state
        let isInitialized = false;
        let toggleStates = {};
        let slidersMoved = false;
        let isOptimizeMode = false;
        window.sliderState = {
            budgetFlexibility: '0',
            scheduleFlexibility: '0',
            scopeCertainty: '0',
            qualityTolerance: '0',
            targetValue: null
        };
        let targetProbabilityData = null;
        let tasks = {};
        let taskValidationError = false;

        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing...');
            google.charts.load('current', { packages: ['corechart', 'line'] });
            google.charts.setOnLoadCallback(initialize);
        });

        function initialize() {
            document.title = 'Interactive Probability Simulator';
            setupToggleListeners();
            setupSliderListeners();
            setupControlListeners();
            restoreSliders();
            fetchTasks(function() {
                console.log('Tasks fetched, count:', Object.keys(tasks).length);
                if (Object.keys(tasks).length > 0) {
                    fetchTargetProbabilityData(function() {
                        console.log('Data fetched, initializing UI');
                        isInitialized = true;
                        setInitialTask();
                        setInitialTargetValue();
                        updateTargetRange();
                        updateModeSelectLabel();
                        drawAllPlots();
                        updateResults();
                        syncSliderDisplays();
                        populateCombinationTable(1);
                        document.getElementById('loading-overlay').style.display = 'none';
                    });
                } else {
                    taskValidationError = true;
                    document.getElementById('task-select').innerHTML = '<option value="">No valid tasks available</option>';
                    document.getElementById('loading-overlay').textContent = 'Error: No valid tasks found (best case < most likely < worst case not satisfied). Using default values. Please contact support.';
                    setTimeout(() => document.getElementById('loading-overlay').style.display = 'none', 3000);
                    updateResults();
                }
            });

            window.addEventListener('scroll', function() {
                document.getElementById('back-to-top').style.display = window.scrollY > 200 ? 'block' : 'none';
            }, { passive: true });
            document.getElementById('back-to-top').addEventListener('click', function() {
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }, { passive: true });
        }

        function updateModeSelectLabel() {
            const modeSelect = document.getElementById('mode-select');
            const label = document.querySelector('#mode-select-container label');
            if (modeSelect && label) {
                const mode = modeSelect.value || 'target';
                label.textContent = mode.charAt(0).toUpperCase() + mode.slice(1) + ' Mode';
            }
        }

        function setInitialTask() {
    const taskSelect = document.getElementById('task-select');
    if (Object.keys(tasks).length > 0) {
        const selectedTask = Object.keys(tasks).find(task => tasks[task].selectedForPlot) || Object.keys(tasks)[0];
        taskSelect.value = selectedTask;
        if (!isValidTask(tasks[selectedTask])) {
            taskValidationError = true;
            document.getElementById('task-select').innerHTML = '<option value="">Invalid task data</option>';
            updateResults();
            return;
        }
        updateTargetRange();
        setInitialTargetValue();
        fetchTargetProbabilityData(function() {
            drawAllPlots();
            updateResults();
            syncSliderDisplays();
            populateCombinationTable(1);
        }, true);
    } else {
        taskValidationError = true;
        updateResults();
    }
}

        function isValidTask(task) {
            return task && Number.isFinite(task.optimistic) && Number.isFinite(task.mostLikely) && Number.isFinite(task.pessimistic) &&
                   task.optimistic < task.mostLikely && task.mostLikely < task.pessimistic;
        }

function fetchTasks(callback) {
    console.log('Fetching tasks...');
    google.script.run
        .withSuccessHandler(function(taskData) {
            console.log('Task data received:', taskData);
            const taskSelect = document.getElementById('task-select');
            taskSelect.innerHTML = '';
            tasks = {};
            let selectedTask = null;
            if (taskData && taskData.length > 0) {
                taskData.forEach(function(task) {
                    if (isValidTask(task)) {
                        tasks[task.task] = {
                            optimistic: task.optimistic,
                            mostLikely: task.mostLikely,
                            pessimistic: task.pessimistic,
                            selectedForPlot: task.selectedForPlot // Store selectedForPlot flag
                        };
                        const option = document.createElement('option');
                        option.value = task.task;
                        option.textContent = task.task;
                        taskSelect.appendChild(option);
                        if (task.selectedForPlot) {
                            selectedTask = task.task; // Track the selected task
                        }
                    }
                });
                if (Object.keys(tasks).length > 0) {
                    taskSelect.value = selectedTask || taskData[0].task; // Prefer selectedForPlot task, fallback to first task
                    taskValidationError = false;
                } else {
                    taskSelect.innerHTML = '<option value="">No valid tasks available</option>';
                    taskValidationError = true;
                }
            } else {
                taskSelect.innerHTML = '<option value="">No tasks available</option>';
                taskValidationError = true;
            }
            callback();
        })
        .withFailureHandler(function(error) {
            console.error('Error fetching tasks:', error);
            document.getElementById('task-select').innerHTML = '<option value="">Error loading tasks</option>';
            document.getElementById('loading-overlay').textContent = 'Error loading tasks: ' + error.message;
            taskValidationError = true;
            setTimeout(() => document.getElementById('loading-overlay').style.display = 'none', 3000);
            callback();
        })
        .getAllTasks();
}

        function setupToggleListeners() {
            document.querySelectorAll('.toggle-use-case, .toggle-summary').forEach(function(button) {
                button.addEventListener('click', function() {
                    const targetId = button.getAttribute('data-target');
                    const target = document.getElementById(targetId);
                    if (!target) return;
                    const isExpanded = button.getAttribute('aria-expanded') === 'true';
                    const newExpanded = !isExpanded;
                    target.style.display = newExpanded ? (button.classList.contains('toggle-summary') ? 'flex' : 'block') : 'none';
                    button.setAttribute('aria-expanded', newExpanded);
                    button.textContent = (newExpanded ? '▲ ' : '▼ ') + button.textContent.slice(2);
                    toggleStates[targetId] = newExpanded;
                }, { passive: true });
            });
        }

        function restoreSliders() {
            const sliders = ['targetBudgetFlexibility', 'targetScheduleFlexibility', 'targetScopeCertainty', 'targetQualityTolerance'];
            sliders.forEach(function(id) {
                const slider = document.getElementById(id);
                if (!slider) return;
                const key = id.replace(/^target/, '').replace(/^./, function(c) { return c.toLowerCase(); });
                let value = isOptimizeMode && targetProbabilityData?.optimalData?.value?.optimalSliderSettings
                    ? (targetProbabilityData.optimalData.value.optimalSliderSettings[key] || 0)
                    : 0;
                slider.value = value;
                window.sliderState[key] = value.toString();
                updateSliderValueDisplay(id, value);
            });
            slidersMoved = false;
            enableSliders(!isOptimizeMode);
        }

        function enableSliders(enabled) {
            const sliders = ['targetBudgetFlexibility', 'targetScheduleFlexibility', 'targetScopeCertainty', 'targetQualityTolerance'];
            sliders.forEach(function(id) {
                const slider = document.getElementById(id);
                if (!slider) return;
                slider.disabled = !enabled;
                slider.style.backgroundColor = enabled ? '#ffffff' : '#e0e0e0';
            });
        }

        function updateSliderValueDisplay(id, value) {
            const valueSpan = document.getElementById(id + 'Value');
            if (valueSpan && !isNaN(value)) {
                valueSpan.textContent = `${value.toFixed(0)}%`;
            } else {
                valueSpan.textContent = '0%';
            }
        }

        function syncSliderDisplays() {
            const sliders = ['targetBudgetFlexibility', 'targetScheduleFlexibility', 'targetScopeCertainty', 'targetQualityTolerance'];
            sliders.forEach(function(id) {
                const key = id.replace(/^target/, '').replace(/^./, function(c) { return c.toLowerCase(); });
                const value = parseFloat(window.sliderState[key]) || 0;
                updateSliderValueDisplay(id, value);
            });
            const optimizeMode = document.getElementById('optimize-select')?.value || 'no';
            const modeSelect = document.getElementById('mode-select')?.value || 'target';
            const exploreModeTitle = document.getElementById('explore-mode-title');
            if (exploreModeTitle) {
                if (optimizeMode === 'yes') {
                    exploreModeTitle.textContent = 'View Optimized Settings for Maximum Outcome';
                } else {
                    exploreModeTitle.textContent = `Adjust Sliders to Explore ${modeSelect.charAt(0).toUpperCase() + modeSelect.slice(1)} Value Probability`;
                }
            } else {
                console.error('Explore mode title element not found');
            }
        }

        function setupSliderListeners() {
            const sliders = ['targetBudgetFlexibility', 'targetScheduleFlexibility', 'targetScopeCertainty', 'targetQualityTolerance'];
            const debounce = function(func, wait) {
                let timeout;
                return function() {
                    clearTimeout(timeout);
                    timeout = setTimeout(func, wait);
                };
            };
            sliders.forEach(function(id) {
                const slider = document.getElementById(id);
                if (!slider) return;
                slider.addEventListener('input', debounce(function() {
                    if (isOptimizeMode) return;
                    const key = id.replace(/^target/, '').replace(/^./, function(c) { return c.toLowerCase(); });
                    const value = parseFloat(slider.value);
                    window.sliderState[key] = value.toString();
                    fetchTargetProbabilityData(function() {
                        drawAllPlots();
                        updateResults();
                        syncSliderDisplays();
                        populateCombinationTable(1);
                    });
                }, 200));
            });
        }

        function setupControlListeners() {
            const taskSelect = document.getElementById('task-select');
            const modeSelect = document.getElementById('mode-select');
            const targetInput = document.getElementById('target-value-input');
            const confidenceInput = document.getElementById('confidence-level-input');
            const optimizeSelect = document.getElementById('optimize-select');

            if (taskSelect) {
                taskSelect.addEventListener('change', function() {
                    taskValidationError = tasks[this.value] && !isValidTask(tasks[this.value]);
                    updateTargetRange();
                    setInitialTargetValue();
                    updateTargetInputRange();
                    if (validateInputs()) fetchTargetProbabilityData(function() {
                        drawAllPlots();
                        updateResults();
                        syncSliderDisplays();
                        populateCombinationTable(1);
                    });
                });
            }

            if (modeSelect) {
                modeSelect.addEventListener('change', function() {
                    toggleModeInputs();
                    updateModeSelectLabel();
                    if (!isOptimizeMode) {
                        restoreSliders();
                    }
                    if (validateInputs()) fetchTargetProbabilityData(function() {
                        drawAllPlots();
                        updateResults();
                        syncSliderDisplays();
                        populateCombinationTable(1);
                    });
                });
            }

            if (targetInput) {
                targetInput.addEventListener('input', function() {
                    if (validateTargetInput()) fetchTargetProbabilityData(function() {
                        drawAllPlots();
                        updateResults();
                        syncSliderDisplays();
                        populateCombinationTable(1);
                    });
                });
            }

            if (confidenceInput) {
                confidenceInput.addEventListener('input', function() {
                    if (validateConfidenceInput()) fetchTargetProbabilityData(function() {
                        drawAllPlots();
                        updateResults();
                        syncSliderDisplays();
                        populateCombinationTable(1);
                    });
                });
            }

            if (optimizeSelect) {
                optimizeSelect.addEventListener('change', function() {
                    isOptimizeMode = this.value === 'yes';
                    enableSliders(!isOptimizeMode);
                    restoreSliders();
                    fetchTargetProbabilityData(function() {
                        drawAllPlots();
                        updateResults();
                        syncSliderDisplays();
                        console.log('Optimize mode changed, sliderValues:', window.sliderState);
                        populateCombinationTable(1);
                    });
                });
            }

            toggleModeInputs();
            updateModeSelectLabel();
        }

        function updateTargetRange() {
            const task = document.getElementById('task-select')?.value;
            const targetRange = document.getElementById('target-range');
            if (task && tasks[task] && isValidTask(tasks[task]) && targetRange) {
                const min = tasks[task].optimistic;
                const max = tasks[task].pessimistic;
                targetRange.textContent = `${min} - ${max}`;
            } else if (targetRange) {
                targetRange.textContent = 'N/A';
            }
        }

        function updateTargetInputRange() {
            const task = document.getElementById('task-select')?.value;
            const targetInput = document.getElementById('target-value-input');
            if (task && tasks[task] && isValidTask(tasks[task]) && targetInput) {
                targetInput.min = tasks[task].optimistic;
                targetInput.max = tasks[task].pessimistic;
                if (!window.sliderState.targetValue) {
                    window.sliderState.targetValue = tasks[task].mostLikely.toString();
                    targetInput.value = tasks[task].mostLikely;
                }
            }
        }

        function toggleModeInputs() {
            const mode = document.getElementById('mode-select')?.value || 'target';
            const targetInputContainer = document.getElementById('target-input-container');
            const confidenceInputContainer = document.getElementById('confidence-input-container');
            if (targetInputContainer && confidenceInputContainer) {
                targetInputContainer.style.display = mode === 'target' ? 'flex' : 'none';
                confidenceInputContainer.style.display = mode === 'confidence' ? 'flex' : 'none';
            }
            validateInputs();
        }

        function validateTargetInput() {
            const input = document.getElementById('target-value-input');
            const message = document.getElementById('target-value-message');
            const task = document.getElementById('task-select')?.value;

            if (!task || !tasks[task] || !isValidTask(tasks[task]) || !input || !message) {
                if (message) message.textContent = taskValidationError ? 'Invalid task data.' : '';
                return false;
            }

            if (!input.value) {
                message.textContent = 'Please enter a target value.';
                return false;
            }

            const value = parseFloat(input.value);
            const min = tasks[task].optimistic;
            const max = tasks[task].pessimistic;

            if (isNaN(value) || value < min || value > max) {
                message.textContent = 'Value must be between ' + min + ' and ' + max + '.';
                return false;
            }

            message.textContent = '';
            window.sliderState.targetValue = value.toString();
            return true;
        }

        function validateConfidenceInput() {
            const input = document.getElementById('confidence-level-input');
            const message = document.getElementById('confidence-level-message');
            const task = document.getElementById('task-select')?.value;

            if (!task || !tasks[task] || !isValidTask(tasks[task]) || !input || !message) {
                if (message) message.textContent = taskValidationError ? 'Invalid task data.' : '';
                return false;
            }

            if (!input.value) {
                message.textContent = 'Please enter a confidence level.';
                return false;
            }

            const value = parseInt(input.value);
            if (isNaN(value) || value < 1 || value > 100) {
                message.textContent = 'Must be an integer between 1 and 100.';
                return false;
            }

            message.textContent = '';
            return true;
        }

        function validateInputs() {
            const mode = document.getElementById('mode-select')?.value || 'target';
            return mode === 'target' ? validateTargetInput() : validateConfidenceInput();
        }

        function setInitialTargetValue() {
            const task = document.getElementById('task-select')?.value;
            const targetInput = document.getElementById('target-value-input');
            if (task && tasks[task] && isValidTask(tasks[task]) && targetInput) {
                const min = tasks[task].optimistic;
                const max = tasks[task].pessimistic;
                const median = (min + max) / 2;
                window.sliderState.targetValue = median.toString();
                targetInput.value = median;
                updateTargetInputRange();
            } else if (targetInput) {
                window.sliderState.targetValue = '2400.00';
                targetInput.value = 2400.00;
                taskValidationError = true;
                updateResults();
            }
        }

        function updateResults() {
            const task = document.getElementById('task-select')?.value;
            if (!task || !tasks[task] || !isValidTask(tasks[task]) || taskValidationError) {
                const exploreResults = document.getElementById('explore-results');
                if (exploreResults) {
                    exploreResults.innerHTML = `
                        <h3 class="results-header">Exploration Results</h3>
                        <p class="results-text">Error: Invalid task data (best case < most likely < worst case not satisfied) or no task selected. Using default values (target: 2400.00). Please select a valid task or contact support.</p>
                    `;
                }
                const recommendationsContent = document.getElementById('recommendations-content');
                if (recommendationsContent) {
                    recommendationsContent.innerHTML = '<p class="results-text">Error: Invalid task data or no task selected.</p>';
                }
                return;
            }
            if (!targetProbabilityData) {
                const exploreResults = document.getElementById('explore-results');
                if (exploreResults) {
                    exploreResults.innerHTML = '<h3 class="results-header">Exploration Results</h3><p class="results-text">Error: Unable to load results due to API failure.</p>';
                }
                const recommendationsContent = document.getElementById('recommendations-content');
                if (recommendationsContent) {
                    recommendationsContent.innerHTML = '<p class="results-text">Error: Unable to load results due to API failure.</p>';
                }
                return;
            }

            const targetValue = parseFloat(window.sliderState.targetValue) || tasks[task].mostLikely || 2400.00;
            const mode = document.getElementById('mode-select')?.value || 'target';
            const confidenceLevel = parseInt(document.getElementById('confidence-level-input')?.value) || 90;
            const origProb = targetProbabilityData.targetProbability?.value.original * 100 || 54.0;
            const adjProb = targetProbabilityData.targetProbability?.value.adjusted * 100 || 97.6;
            const optimalData = targetProbabilityData?.optimalData?.value || {};
            let optimalValue = optimalData.optimalObjective || targetValue;
            const optimalProb = optimalData.probability * 100 || 100.0;
            const metrics = targetProbabilityData?.decisionOptimizerMetrics?.value || {};
            const bestCase = tasks[task]?.optimistic.toFixed(2) || '1800.00';
            const mostLikely = tasks[task]?.mostLikely.toFixed(2) || '2400.00';
            const worstCase = tasks[task]?.pessimistic.toFixed(2) || '3000.00';
            const sliderSettings = isOptimizeMode ? {
                budgetFlexibility: optimalData?.optimalSliderSettings?.budgetFlexibility ?? window.sliderState.budgetFlexibility ?? 0,
                scheduleFlexibility: optimalData?.optimalSliderSettings?.scheduleFlexibility ?? window.sliderState.scheduleFlexibility ?? 0,
                scopeCertainty: optimalData?.optimalSliderSettings?.scopeCertainty ?? window.sliderState.scopeCertainty ?? 0,
                qualityTolerance: optimalData?.optimalSliderSettings?.qualityTolerance ?? window.sliderState.qualityTolerance ?? 0
            } : window.sliderState;
            const valueAtConfidence = targetProbabilityData.valueAtConfidence?.value.adjusted || 2325.50;
            const originalValueAtConfidence = targetProbabilityData.valueAtConfidence?.value.original || 2504.91;

            if (task && tasks[task] && (optimalValue < tasks[task].optimistic || optimalValue > tasks[task].pessimistic)) {
                optimalValue = targetValue;
            }

            if (isOptimizeMode) {
                console.log('Optimize mode slider settings:', sliderSettings);
                if (!optimalData?.optimalSliderSettings) {
                    console.warn('Optimal slider settings missing in API response');
                }
            }

            let exploreText = '';
            if (isOptimizeMode) {
                exploreText = `
                    The task <span class="dynamic">"${task}"</span> (Best Case: <span class="dynamic">${bestCase}</span>, Most Likely: <span class="dynamic">${mostLikely}</span>, Worst Case: <span class="dynamic">${worstCase}</span>) was modeled using a probability distribution. 
                    <span class="glow">With optimized settings (Budget Flexibility: ${sliderSettings.budgetFlexibility}%, Schedule Flexibility: ${sliderSettings.scheduleFlexibility}%, Scope Certainty: ${sliderSettings.scopeCertainty}%, Tolerance for Poor Quality: ${sliderSettings.qualityTolerance}%</span>), you can achieve an optimal target of <span class="dynamic">${optimalValue.toFixed(2)}</span> with <span class="dynamic">${optimalProb.toFixed(1)}%</span> confidence—a success probability of <span class="dynamic">${optimalProb.toFixed(1)}%</span>, 
                    compared to <span class="dynamic">${origProb.toFixed(1)}%</span> for your target of <span class="dynamic">${targetValue.toFixed(2)}</span>. 
                    For reference, the <span class="dynamic">${confidenceLevel}%</span> confidence value without optimization was <span class="dynamic">${originalValueAtConfidence.toFixed(2)}</span>. 
                    These settings are tuned to maximize your outcome against the defined <span class="dynamic">${mode}</span>.
                `;
            } else if (mode === 'target') {
                exploreText = `
                    The task <span class="dynamic">"${task}"</span> (Best Case: <span class="dynamic">${bestCase}</span>, Most Likely: <span class="dynamic">${mostLikely}</span>, Worst Case: <span class="dynamic">${worstCase}</span>) was modeled using a probability distribution. 
                    With current settings (Budget Flexibility: <span class="dynamic">${sliderSettings.budgetFlexibility}%</span>, Schedule Flexibility: <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span>, 
                    Scope Certainty: <span class="dynamic">${sliderSettings.scopeCertainty}%</span>, Tolerance for Poor Quality: <span class="dynamic">${sliderSettings.qualityTolerance}%</span>), 
                    the <span class="glow">probability of achieving your target value of ${targetValue.toFixed(2)} is ${adjProb.toFixed(1)}%</span>, 
                    leaving only a <span class="dynamic">${(100 - adjProb).toFixed(1)}%</span> chance of failure.
                    Adjust sliders below to see how your target changes. If you want to see the slider settings that will optimize your target, select "Yes" in the Optimize dropdown.
                `;
            } else {
                exploreText = `
                    The task <span class="dynamic">"${task}"</span> (Best Case: <span class="dynamic">${bestCase}</span>, Most Likely: <span class="dynamic">${mostLikely}</span>, Worst Case: <span class="dynamic">${worstCase}</span>) was modeled using a probability distribution. 
                    With your current slider settings (Budget Flexibility: <span class="dynamic">${sliderSettings.budgetFlexibility}%</span>, Schedule Flexibility: <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span>, 
                    Scope Certainty: <span class="dynamic">${sliderSettings.scopeCertainty}%</span>, Tolerance for Poor Quality: <span class="dynamic">${sliderSettings.qualityTolerance}%</span>), 
                    <span class="glow">you can expect to achieve ${valueAtConfidence.toFixed(2)} with ${confidenceLevel}% confidence</span>—meaning there's a <span class="dynamic">${100 - confidenceLevel}%</span> chance of exceeding this value.
                    Adjust sliders below to see how your confidence changes. If you want to see the slider settings that will optimize your confidence, select "Yes" in the Optimize dropdown.
                `;
            }

            const exploreResults = document.getElementById('explore-results');
            if (exploreResults) {
                exploreResults.innerHTML = `
                    <h3 class="results-header">Exploration Results</h3>
                    <p class="results-text">${exploreText}</p>
                `;
            } else {
                console.error('Explore results element not found');
            }

            updateRecommendations();
            updateMetricsTable();
        }

        function fetchTargetProbabilityData(callback, force = false) {
            const task = document.getElementById('task-select')?.value;
            if (!task || !tasks[task] || !isValidTask(tasks[task])) {
                const errorMessage = '<p style="color: red; text-align: center;">Error: Please select a valid task.</p>';
                const plotContainers = ['pdf-chart', 'cdf-chart'];
                plotContainers.forEach(id => {
                    const container = document.getElementById(id);
                    if (container) container.innerHTML = errorMessage;
                });
                const combTable = document.getElementById('combination-table-body');
                if (combTable) combTable.innerHTML = '<tr><td colspan="8">Error: Please select a valid task.</td></tr>';
                targetProbabilityData = null;
                callback();
                return;
            }

            const mode = document.getElementById('mode-select')?.value || 'target';
            const sliderValues = {
                budgetFlexibility: parseFloat(window.sliderState.budgetFlexibility) || 0,
                scheduleFlexibility: parseFloat(window.sliderState.scheduleFlexibility) || 0,
                scopeCertainty: parseFloat(window.sliderState.scopeCertainty) || 0,
                qualityTolerance: parseFloat(window.sliderState.qualityTolerance) || 0
            };
            const targetValue = parseFloat(window.sliderState.targetValue) || tasks[task].mostLikely || 2400.00;
            const confidenceLevel = parseInt(document.getElementById('confidence-level-input')?.value) / 100 || 0.9;

            google.script.run
                .withSuccessHandler(data => {
                    targetProbabilityData = data;
                    if (isOptimizeMode && data.optimalData?.value?.optimalSliderSettings) {
                        window.sliderState = {
                            ...data.optimalData.value.optimalSliderSettings,
                            targetValue: window.sliderState.targetValue
                        };
                        restoreSliders();
                    }
                    callback();
                })
                .withFailureHandler(error => {
                    console.error('API Error:', error);
                    targetProbabilityData = null;
                    const errorMessage = '<p style="color: red; text-align: center;">Error: ' + error.message + '</p>';
                    const plotContainers = ['pdf-chart', 'cdf-chart'];
                    plotContainers.forEach(id => {
                        const container = document.getElementById(id);
                        if (container) container.innerHTML = errorMessage;
                    });
                    const combTable = document.getElementById('combination-table-body');
                    if (combTable) combTable.innerHTML = '<tr><td colspan="8">Error: ' + error.message + '</td></tr>';
                    document.getElementById('loading-overlay').textContent = `Error: ${error.message}`;
                    setTimeout(() => document.getElementById('loading-overlay').style.display = 'none', 2000);
                    callback();
                })
                .getTargetProbabilityData({
                    task: task,
                    optimistic: tasks[task].optimistic,
                    mostLikely: tasks[task].mostLikely,
                    pessimistic: tasks[task].pessimistic,
                    sliderValues: sliderValues,
                    targetValue: targetValue,
                    confidenceLevel: confidenceLevel,
                    isOptimizeMode: isOptimizeMode,
                    mode: mode,
                    previousOptimalSliderSettings: targetProbabilityData?.optimalData?.value?.optimalSliderSettings
                });
        }

        function drawAllPlots() {
            drawPdfPlot();
            drawCdfPlot();
            updateResults();
            syncSliderDisplays();
        }

        function drawPdfPlot() {
            const chartDiv = document.getElementById('pdf-chart');
            if (!chartDiv) return;
            if (!targetProbabilityData || !targetProbabilityData.targetProbabilityOriginalPdf || !targetProbabilityData.targetProbabilityAdjustedPdf) {
                chartDiv.innerHTML = '<p style="color: red; text-align: center;">Error: Unable to load data due to API failure.</p>';
                return;
            }

            const origPoints = targetProbabilityData.targetProbabilityOriginalPdf.value;
            const adjPoints = targetProbabilityData.targetProbabilityAdjustedPdf.value;
            const task = document.getElementById('task-select')?.value;
            const targetValue = parseFloat(window.sliderState.targetValue) || tasks[task]?.mostLikely || 2400.00;
            const confidenceLevel = parseInt(document.getElementById('confidence-level-input')?.value) / 100 || 0.9;
            const optimizeMode = document.getElementById('optimize-select')?.value || 'no';
            const origProb = targetProbabilityData.targetProbability?.value.original * 100 || 54.0;
            const adjProb = targetProbabilityData.targetProbability?.value.adjusted * 100 || 97.6;
            const optimalData = targetProbabilityData?.optimalData?.value || {};
            let optimalValue = optimalData.optimalObjective || targetValue;
            const optimalProb = optimalData.probability * 100 || 100.0;

            if (task && tasks[task] && (optimalValue < tasks[task].optimistic || optimalValue > tasks[task].pessimistic)) {
                optimalValue = targetValue;
                console.warn(`Optimal value ${optimalValue} adjusted to target value ${targetValue} due to range violation`);
            }

            const data = new google.visualization.DataTable();
            data.addColumn('number', 'X');
            data.addColumn('number', 'Original PDF');
            data.addColumn('number', 'Slider Adjusted PDF');
            data.addColumn('number', 'Original Target');
            data.addColumn({ type: 'string', role: 'annotation' });
            data.addColumn({ type: 'string', role: 'tooltip' });
            data.addColumn('number', 'Adjusted Target');
            data.addColumn({ type: 'string', role: 'annotation' });
            data.addColumn({ type: 'string', role: 'tooltip' });
            data.addColumn('number', 'Optimized Adjusted');
            data.addColumn({ type: 'string', role: 'annotation' });
            data.addColumn({ type: 'string', role: 'tooltip' });

            let targetIdx = 0;
            let optimalIdx = 0;
            let minDiff = Infinity;
            let minOptimalDiff = Infinity;
            origPoints.forEach(function(point, i) {
                const x = point.x;
                const origY = point.y;
                const adjY = adjPoints[i]?.y || 0;
                data.addRow([x, origY, adjY, null, null, null, null, null, null, null, null, null]);
                const diff = Math.abs(x - (optimizeMode === 'no' && document.getElementById('mode-select')?.value === 'confidence' ? 
                    (targetProbabilityData.valueAtConfidence?.value.adjusted || targetValue) : 
                    targetValue));
                if (diff < minDiff) {
                    minDiff = diff;
                    targetIdx = i;
                }
                if (isOptimizeMode && Math.abs(x - optimalValue) < minOptimalDiff) {
                    minOptimalDiff = Math.abs(x - optimalValue);
                    optimalIdx = i;
                }
            });

            if (optimizeMode === 'no' && document.getElementById('mode-select')?.value === 'confidence') {
                const valueAtConfidence = targetProbabilityData.valueAtConfidence?.value.adjusted || 2325.50;
                const origValueAtConfidence = targetProbabilityData.valueAtConfidence?.value.original || 2504.91;
                minDiff = Infinity;
                origPoints.forEach(function(point, i) {
                    const diff = Math.abs(point.x - valueAtConfidence);
                    if (diff < minDiff) {
                        minDiff = diff;
                        targetIdx = i;
                    }
                });
                data.setValue(targetIdx, 3, origPoints[targetIdx].y);
                data.setValue(targetIdx, 4, `Original PDF - value: ${origValueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
                data.setValue(targetIdx, 5, `Original - value: ${origValueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
                data.setValue(targetIdx, 6, adjPoints[targetIdx].y);
                data.setValue(targetIdx, 7, `Slider Adjusted PDF - value: ${valueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
                data.setValue(targetIdx, 8, `Adjusted - value: ${valueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
            } else {
                data.setValue(targetIdx, 3, origPoints[targetIdx].y);
                data.setValue(targetIdx, 4, `Original PDF - value: ${targetValue.toFixed(2)}, confidence: ${origProb.toFixed(1)}%`);
                data.setValue(targetIdx, 5, `Original - value: ${targetValue.toFixed(2)}, confidence: ${origProb.toFixed(1)}%`);
                data.setValue(targetIdx, 6, adjPoints[targetIdx].y);
                data.setValue(targetIdx, 7, `Slider Adjusted PDF - value: ${targetValue.toFixed(2)}, confidence: ${adjProb.toFixed(1)}%`);
                data.setValue(targetIdx, 8, `Adjusted - value: ${targetValue.toFixed(2)}, confidence: ${adjProb.toFixed(1)}%`);
            }

            if (isOptimizeMode && minOptimalDiff < Infinity && optimalIdx < data.getNumberOfRows()) {
                data.setValue(optimalIdx, 9, adjPoints[optimalIdx]?.y || 0);
                data.setValue(optimalIdx, 10, `Optimized Adjusted PDF - value: ${optimalValue.toFixed(2)}, confidence: ${optimalProb.toFixed(1)}%`);
                data.setValue(optimalIdx, 11, `Optimized Adjusted - value: ${optimalValue.toFixed(2)}, confidence: ${optimalProb.toFixed(1)}%`);
            } else if (isOptimizeMode) {
                console.warn(`Optimized point not rendered: minOptimalDiff=${minOptimalDiff}, optimalIdx=${optimalIdx}, rows=${data.getNumberOfRows()}`);
            }

            const options = {
                hAxis: { title: 'Value' },
                vAxis: { title: 'Probability Density' },
                title: 'Interactive Probability Simulator - PDF',
                series: {
                    0: { color: '#888888', lineWidth: 2, pointSize: 0 },
                    1: { color: '#1f77b4', lineWidth: 2, pointSize: 0, lineDashStyle: [4, 4] },
                    2: { lineWidth: 0, pointSize: 10, color: '#FF0000', pointShape: 'circle', visibleInLegend: false },
                    3: { lineWidth: 0, pointSize: 10, color: '#1f77b4', pointShape: 'circle', visibleInLegend: false },
                    4: { lineWidth: 0, pointSize: 10, color: '#00FF00', pointShape: 'circle', visibleInLegend: false }
                },
                legend: { position: 'top' },
                annotations: { 
                    textStyle: { fontSize: 10, color: '#000' }, 
                    stemLength: 20, 
                    alwaysOutside: true 
                },
                tooltip: { trigger: 'both' }
            };

            const chart = new google.visualization.LineChart(chartDiv);
            try {
                chart.draw(data, options);
            } catch (error) {
                chartDiv.innerHTML = '<p style="color: red; text-align: center;">Error rendering PDF.</p>';
            }
        }

        function drawCdfPlot() {
            const chartDiv = document.getElementById('cdf-chart');
            if (!chartDiv) return;
            if (!targetProbabilityData || !targetProbabilityData.targetProbabilityOriginalCdf || !targetProbabilityData.targetProbabilityAdjustedCdf) {
                chartDiv.innerHTML = '<p style="color: red; text-align: center;">Error: Unable to load data due to API failure.</p>';
                return;
            }

            const origPoints = targetProbabilityData.targetProbabilityOriginalCdf.value;
            const adjPoints = targetProbabilityData.targetProbabilityAdjustedCdf.value;
            const task = document.getElementById('task-select')?.value;
            const targetValue = parseFloat(window.sliderState.targetValue) || tasks[task]?.mostLikely || 2400.00;
            const confidenceLevel = parseInt(document.getElementById('confidence-level-input')?.value) / 100 || 0.9;
            const optimizeMode = document.getElementById('optimize-select')?.value || 'no';
            const origProb = targetProbabilityData.targetProbability?.value.original * 100 || 54.0;
            const adjProb = targetProbabilityData.targetProbability?.value.adjusted * 100 || 97.6;
            const optimalData = targetProbabilityData?.optimalData?.value || {};
            let optimalValue = optimalData.optimalObjective || targetValue;
            const optimalProb = optimalData.probability * 100 || 100.0;

            if (task && tasks[task] && (optimalValue < tasks[task].optimistic || optimalValue > tasks[task].pessimistic)) {
                optimalValue = targetValue;
                console.warn(`Optimal value ${optimalValue} adjusted to target value ${targetValue} due to range violation`);
            }

            const data = new google.visualization.DataTable();
            data.addColumn('number', 'X');
            data.addColumn('number', 'Original CDF');
            data.addColumn('number', 'Slider Adjusted CDF');
            data.addColumn('number', 'Original Target');
            data.addColumn({ type: 'string', role: 'annotation' });
            data.addColumn({ type: 'string', role: 'tooltip' });
            data.addColumn('number', 'Adjusted Target');
            data.addColumn({ type: 'string', role: 'annotation' });
            data.addColumn({ type: 'string', role: 'tooltip' });
            data.addColumn('number', 'Optimized Adjusted');
            data.addColumn({ type: 'string', role: 'annotation' });
            data.addColumn({ type: 'string', role: 'tooltip' });

            let targetIdx = 0;
            let optimalIdx = 0;
            let minDiff = Infinity;
            let minOptimalDiff = Infinity;
                        origPoints.forEach(function(point, i) {
                const x = point.x;
                const origY = point.y;
                const adjY = adjPoints[i]?.y || 0;
                data.addRow([x, origY, adjY, null, null, null, null, null, null, null, null, null]);
                const diff = Math.abs(x - (optimizeMode === 'no' && document.getElementById('mode-select')?.value === 'confidence' ? 
                    (targetProbabilityData.valueAtConfidence?.value.adjusted || targetValue) : 
                    targetValue));
                if (diff < minDiff) {
                    minDiff = diff;
                    targetIdx = i;
                }
                if (isOptimizeMode && Math.abs(x - optimalValue) < minOptimalDiff) {
                    minOptimalDiff = Math.abs(x - optimalValue);
                    optimalIdx = i;
                }
            });

            if (optimizeMode === 'no' && document.getElementById('mode-select')?.value === 'confidence') {
                const valueAtConfidence = targetProbabilityData.valueAtConfidence?.value.adjusted || 2325.50;
                const origValueAtConfidence = targetProbabilityData.valueAtConfidence?.value.original || 2504.91;
                minDiff = Infinity;
                origPoints.forEach(function(point, i) {
                    const diff = Math.abs(point.x - valueAtConfidence);
                    if (diff < minDiff) {
                        minDiff = diff;
                        targetIdx = i;
                    }
                });
                data.setValue(targetIdx, 3, origPoints[targetIdx].y);
                data.setValue(targetIdx, 4, `Original CDF - value: ${origValueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
                data.setValue(targetIdx, 5, `Original - value: ${origValueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
                data.setValue(targetIdx, 6, adjPoints[targetIdx].y);
                data.setValue(targetIdx, 7, `Slider Adjusted CDF - value: ${valueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
                data.setValue(targetIdx, 8, `Adjusted - value: ${valueAtConfidence.toFixed(2)}, confidence: ${(confidenceLevel * 100).toFixed(1)}%`);
            } else {
                data.setValue(targetIdx, 3, origPoints[targetIdx].y);
                data.setValue(targetIdx, 4, `Original CDF - value: ${targetValue.toFixed(2)}, confidence: ${origProb.toFixed(1)}%`);
                data.setValue(targetIdx, 5, `Original - value: ${targetValue.toFixed(2)}, confidence: ${origProb.toFixed(1)}%`);
                data.setValue(targetIdx, 6, adjPoints[targetIdx].y);
                data.setValue(targetIdx, 7, `Slider Adjusted CDF - value: ${targetValue.toFixed(2)}, confidence: ${adjProb.toFixed(1)}%`);
                data.setValue(targetIdx, 8, `Adjusted - value: ${targetValue.toFixed(2)}, confidence: ${adjProb.toFixed(1)}%`);
            }

            if (isOptimizeMode && minOptimalDiff < Infinity && optimalIdx < data.getNumberOfRows()) {
                data.setValue(optimalIdx, 9, adjPoints[optimalIdx]?.y || 0);
                data.setValue(optimalIdx, 10, `Optimized Adjusted CDF - value: ${optimalValue.toFixed(2)}, confidence: ${optimalProb.toFixed(1)}%`);
                data.setValue(optimalIdx, 11, `Optimized Adjusted - value: ${optimalValue.toFixed(2)}, confidence: ${optimalProb.toFixed(1)}%`);
            } else if (isOptimizeMode) {
                console.warn(`Optimized point not rendered: minOptimalDiff=${minOptimalDiff}, optimalIdx=${optimalIdx}, rows=${data.getNumberOfRows()}`);
            }

            const options = {
                hAxis: { title: 'Value' },
                vAxis: { title: 'Cumulative Probability', minValue: 0, maxValue: 1 },
                title: 'Interactive Probability Simulator - CDF',
                series: {
                    0: { color: '#888888', lineWidth: 2, pointSize: 0 },
                    1: { color: '#1f77b4', lineWidth: 2, pointSize: 0, lineDashStyle: [4, 4] },
                    2: { lineWidth: 0, pointSize: 10, color: '#FF0000', pointShape: 'circle', visibleInLegend: false },
                    3: { lineWidth: 0, pointSize: 10, color: '#1f77b4', pointShape: 'circle', visibleInLegend: false },
                    4: { lineWidth: 0, pointSize: 10, color: '#00FF00', pointShape: 'circle', visibleInLegend: false }
                },
                legend: { position: 'top' },
                annotations: { 
                    textStyle: { fontSize: 10, color: '#000' }, 
                    stemLength: 20, 
                    alwaysOutside: true 
                },
                tooltip: { trigger: 'both' }
            };

            const chart = new google.visualization.LineChart(chartDiv);
            try {
                chart.draw(data, options);
            } catch (error) {
                chartDiv.innerHTML = '<p style="color: red; text-align: center;">Error rendering CDF.</p>';
            }
        }

        function updateRecommendations() {
            const task = document.getElementById('task-select')?.value || '';
            if (!task || !tasks[task] || !isValidTask(tasks[task]) || taskValidationError) {
                const recommendationsContent = document.getElementById('recommendations-content');
                if (recommendationsContent) {
                    recommendationsContent.innerHTML = '<p class="results-text">Error: Please select a valid task or check API connectivity.</p>';
                }
                return;
            }

            const targetValue = parseFloat(window.sliderState.targetValue) || tasks[task].mostLikely || 2400.00;
            const confidenceLevel = parseInt(document.getElementById('confidence-level-input')?.value) || 90;
            const origProb = targetProbabilityData.targetProbability?.value.original * 100 || 54.0;
            const adjProb = targetProbabilityData.targetProbability?.value.adjusted * 100 || 97.6;
            const optimalData = targetProbabilityData?.optimalData?.value || {};
            let optimalValue = optimalData.optimalObjective || targetValue;
            const optimalProb = optimalData.probability * 100 || 100.0;
            const metrics = targetProbabilityData?.decisionOptimizerMetrics?.value || {};
            const bestCase = tasks[task]?.optimistic.toFixed(2) || '1800.00';
            const mostLikely = tasks[task]?.mostLikely.toFixed(2) || '2400.00';
            const worstCase = tasks[task]?.pessimistic.toFixed(2) || '3000.00';
            const sliderSettings = isOptimizeMode ? {
                budgetFlexibility: optimalData?.optimalSliderSettings?.budgetFlexibility ?? window.sliderState.budgetFlexibility ?? 0,
                scheduleFlexibility: optimalData?.optimalSliderSettings?.scheduleFlexibility ?? window.sliderState.scheduleFlexibility ?? 0,
                scopeCertainty: optimalData?.optimalSliderSettings?.scopeCertainty ?? window.sliderState.scopeCertainty ?? 0,
                qualityTolerance: optimalData?.optimalSliderSettings?.qualityTolerance ?? window.sliderState.qualityTolerance ?? 0
            } : window.sliderState;
            const valueAtConfidence = targetProbabilityData.valueAtConfidence?.value.adjusted || 2325.50;
            const originalValueAtConfidence = targetProbabilityData.valueAtConfidence?.value.original || 2504.91;
            const originalMean = ((tasks[task]?.optimistic + 4 * tasks[task]?.mostLikely + tasks[task]?.pessimistic) / 6) || 2400.00;
            const adjustedMean = targetProbabilityData.mcSmoothedMean?.value || 2420.50;
            const originalVariance = targetProbabilityData.mcSmoothedVariance?.value || 32580.25;
            const varianceReduction = ((1 - (metrics.varianceScale || 1.0)) * 100).toFixed(1);
            const higherProb = (origProb + 5).toFixed(1);
            const optimalBudget = optimalData?.optimalSliderSettings?.budgetFlexibility || 60;
            const optimalSchedule = optimalData?.optimalSliderSettings?.scheduleFlexibility || 55;
            const optimalScope = optimalData?.optimalSliderSettings?.scopeCertainty || 80;
            const optimalQuality = optimalData?.optimalSliderSettings?.qualityTolerance || 40;

            if (task && tasks[task] && (optimalValue < tasks[task].optimistic || optimalValue > tasks[task].pessimistic)) {
                optimalValue = targetValue;
                console.warn(`Optimal value ${optimalValue} adjusted to target value ${targetValue} due to range violation`);
            }

            const baselineRiskLevel = origProb >= 90 ? 'very low risk' : origProb >= 75 ? 'low risk' : origProb >= 50 ? 'moderate risk' : 'high risk';
            const currentRiskLevel = adjProb >= 90 ? 'very low risk' : adjProb >= 75 ? 'low risk' : adjProb >= 50 ? 'moderate risk' : 'high risk';
            const optimalRiskLevel = optimalProb >= 90 ? 'very low risk' : optimalProb >= 75 ? 'low risk' : optimalProb >= 50 ? 'moderate risk' : 'high risk';

            const recommendationsText = `
                <h5>Overview</h5>
                <p>Starting with your initial estimates (Optimistic: <span class="dynamic">${bestCase}</span>, Most Likely: <span class="dynamic">${mostLikely}</span>, Pessimistic: <span class="dynamic">${worstCase}</span>), we’ve converted them into a probability model to calculate your <strong>risk profile</strong>, which reflects the likelihood of meeting your target of <span class="dynamic">${targetValue.toFixed(2)}</span> units or achieving a value at your confidence level of <span class="dynamic">${confidenceLevel}%</span>:
                <ul>
                    <li><strong>Baseline Risk Profile</strong>: At 0% slider settings, your success probability is <span class="dynamic">${origProb.toFixed(1)}%</span> for <span class="dynamic">${targetValue.toFixed(2)}</span> (or <span class="dynamic">${originalValueAtConfidence.toFixed(2)}</span> at <span class="dynamic">${confidenceLevel}%</span>), indicating a <span class="dynamic">${baselineRiskLevel}</span> risk profile with potential for <strong>cost overruns</strong>, <strong>schedule delays</strong>, <strong>scope creep</strong>, or <strong>defects</strong>.</li>
                    <li><strong>Current Risk Profile</strong>: With current settings (Budget Flexibility: <span class="dynamic">${sliderSettings.budgetFlexibility}%</span>, Schedule Flexibility: <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span>, Scope Certainty: <span class="dynamic">${sliderSettings.scopeCertainty}%</span>, Tolerance for Poor Quality: <span class="dynamic">${sliderSettings.qualityTolerance}%</span>), your success probability is <span class="dynamic">${adjProb.toFixed(1)}%</span> for <span class="dynamic">${targetValue.toFixed(2)}</span> (or <span class="dynamic">${valueAtConfidence.toFixed(2)}</span> at <span class="dynamic">${confidenceLevel}%</span>), reflecting a <span class="dynamic">${currentRiskLevel}</span> risk profile, improved by <span class="dynamic">${((adjProb - origProb) / origProb * 100).toFixed(1)}%</span>.</li>
                    <li><strong>Optimized Risk Profile</strong>: Using <strong>decision optimization</strong> (Optimize dropdown set to “Yes”), you can achieve <span class="dynamic">${optimalProb.toFixed(1)}%</span> for <span class="dynamic">${optimalValue.toFixed(2)}</span> units, reflecting a <span class="dynamic">${optimalRiskLevel}</span> risk profile with minimal risks.</li>
                </ul>
                The sliders enable you to manage these risks. The list below details each slider’s individual impact, with their combined effect driving <span class="dynamic">${adjProb.toFixed(1)}%</span> or <span class="dynamic">${valueAtConfidence.toFixed(2)}</span>, as shown in the <strong>Slider Combination Table</strong>.</p>

                <h5>Why Sliders Are Powerful for Risk Management</h5>
                <p>Your project estimates are <strong>unitless</strong>—they could represent cost, duration, risk, quality, or another metric. The sliders start at <strong>0%</strong>, assuming no tolerance for overruns, delays, scope changes, or quality issues beyond your initial estimates. By <strong>increasing</strong> or <strong>decreasing</strong> the sliders, you can:</p>
                <ul>
                    <li><strong>Tolerate Controlled Overruns</strong>: Increasing Budget or Schedule Flexibility from 0% allows <strong>cost overruns</strong> or <strong>schedule delays</strong> up to double the Pessimistic estimate at 100% (e.g., Pessimistic of <span class="dynamic">${worstCase}</span> to <span class="dynamic">${(worstCase * 2).toFixed(2)}</span> units).</li>
                    <li><strong>Manage Scope and Quality</strong>: Increasing Scope Certainty reduces the <strong>probability of scope creep</strong> (e.g., <span class="dynamic">${(100 - sliderSettings.scopeCertainty).toFixed(0)}%</span> at <span class="dynamic">${sliderSettings.scopeCertainty}%</span>), while adjusting Tolerance for Poor Quality controls <strong>defects</strong> or <strong>quality trade-offs</strong>, shaping the <strong>risk profile</strong> (<span class="dynamic">${currentRiskLevel}</span>).</li>
                    <li><strong>Test Risk Scenarios</strong>: Sliders let you explore “what-if” scenarios (e.g., “What if I allow a <span class="dynamic">${sliderSettings.budgetFlexibility}%</span> cost overrun or reduce scope creep to <span class="dynamic">${(100 - sliderSettings.scopeCertainty).toFixed(0)}%</span>?”) to improve <span class="dynamic">${adjProb.toFixed(1)}%</span> or <span class="dynamic">${valueAtConfidence.toFixed(2)}</span> at <span class="dynamic">${confidenceLevel}%</span>.</li>
                    <li><strong>Leverage the Slider Combination Table</strong>: The <strong>Slider Combination Table</strong> (below the sliders) is a powerful tool that shows how all slider settings combine to achieve <span class="dynamic">${adjProb.toFixed(1)}%</span> for <span class="dynamic">${targetValue.toFixed(2)}</span> or <span class="dynamic">${valueAtConfidence.toFixed(2)}</span> at <span class="dynamic">${confidenceLevel}%</span>. Its filter options help you optimize your <strong>risk profile</strong> by answering critical questions:
                        <ul>
                            <li><strong>“Current Selection”</strong>: Shows your current settings’ probability (e.g., <span class="dynamic">${sliderSettings.budgetFlexibility}%</span>, <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span>, <span class="dynamic">${sliderSettings.scopeCertainty}%</span>, <span class="dynamic">${sliderSettings.qualityTolerance}%</span>), answering “What is my success probability now?”</li>
                            <li><strong>“Above 75%” or “Above 50%”</strong>: Lists combinations with high success probabilities, answering “Which settings maximize my chance of meeting <span class="dynamic">${targetValue.toFixed(2)}</span> while minimizing <strong>cost overruns</strong> or <strong>defects</strong>?” This helps you identify low-risk strategies.</li>
                            <li><strong>“Optimized”</strong>: Highlights the best settings from <strong>decision optimization</strong>, answering “What settings achieve the highest probability or lowest value at <span class="dynamic">${confidenceLevel}%</span>?” This ensures the optimal <strong>risk profile</strong>.</li>
                            <li><strong>“All”</strong>: Compares all combinations, answering “How do different settings impact <strong>scope creep</strong> or <strong>schedule delays</strong>?” This allows you to explore trade-offs across scenarios.</li>
                            <li>Use pagination (Prev/Next buttons) to explore more combinations, enabling data-driven decisions to balance risks and achieve your project goals.</li>
                        </ul>
                    </li>
                    <li><strong>Optimize Decisions</strong>: Use the Optimize dropdown (“Yes”) to achieve <span class="dynamic">${optimalProb.toFixed(1)}%</span> for <span class="dynamic">${optimalValue.toFixed(2)}</span>, improving your <strong>risk profile</strong> to <span class="dynamic">${optimalRiskLevel}</span>.</li>
                </ul>
                <p>Sliders empower you to refine uncertain estimates, improving your <strong>risk profile</strong> from <span class="dynamic">${baselineRiskLevel}</span> to <span class="dynamic">${currentRiskLevel}</span> and potentially <span class="dynamic">${optimalRiskLevel}</span>.</p>

                <h5>How Sliders Mitigate Project Risks</h5>
                <ul>
                    <li><strong>Budget Flexibility</strong>
                        <ul>
                            <li><strong>What It Does</strong>: Tolerates <strong>cost overruns</strong> (e.g., budget, personnel). At 100%, you can overrun the project cost by double the Pessimistic estimate (from <span class="dynamic">${worstCase}</span> to <span class="dynamic">${(worstCase * 2).toFixed(2)}</span> units).</li>
                            <li><strong>Potential Impact</strong>: Increasing from 0% to <span class="dynamic">${sliderSettings.budgetFlexibility}%</span> shifts outcomes toward lower values (e.g., from <span class="dynamic">${originalMean.toFixed(2)}</span> to <span class="dynamic">${adjustedMean.toFixed(2)}</span> units), reducing <strong>cost overruns</strong>.</li>
                            <li><strong>Impact on Distribution and Probability</strong>: <strong>Increasing from 0% to <span class="dynamic">${sliderSettings.budgetFlexibility}%</span> shifts the distribution left</strong>, lowering the mean, individually increasing the <strong>target probability</strong> for <span class="dynamic">${targetValue.toFixed(2)}</span> (e.g., contributes to <span class="dynamic">${adjProb.toFixed(1)}%</span>) or lowering the value at <span class="dynamic">${confidenceLevel}%</span> (e.g., to <span class="dynamic">${valueAtConfidence.toFixed(2)}</span>).</li>
                            <li><strong>Mathematical Formula</strong>: Adjusts mean: \\(\\mu' = \\mu - f \\cdot (P - M) \\cdot (BF/100)\\), where \\(\\mu\\) = <span class="dynamic">${originalMean.toFixed(2)}</span>, \\(P\\) = <span class="dynamic">${worstCase}</span>, \\(M\\) = <span class="dynamic">${mostLikely}</span>, \\(BF\\) = <span class="dynamic">${sliderSettings.budgetFlexibility}%</span>, \\(f\\) = 0.5.</li>
                            <li><strong>Why It Helps</strong>: Mitigates <strong>cost overruns</strong>, helping achieve <span class="dynamic">${targetValue.toFixed(2)}</span> if units are cost-related, improving the <span class="dynamic">${currentRiskLevel}</span> risk profile.</li>
                            <li><strong>Next Step</strong>: Increase to 50–60% (<span class="dynamic">${(worstCase * 1.5).toFixed(2)}</span>–<span class="dynamic">${(worstCase * 1.6).toFixed(2)}</span> units) and check the <strong>PDF chart</strong> for a left-shifted curve (e.g., mean at <span class="dynamic">${adjustedMean.toFixed(2)}</span>).</li>
                        </ul>
                    </li>
                    <li><strong>Schedule Flexibility</strong>
                        <ul>
                            <li><strong>What It Does</strong>: Tolerates <strong>schedule delays</strong>. At 100%, you can delay the project by double the Pessimistic estimate (from <span class="dynamic">${worstCase}</span> to <span class="dynamic">${(worstCase * 2).toFixed(2)}</span> units).</li>
                            <li><strong>Potential Impact</strong>: Increasing from 0% to <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span> shifts outcomes left (e.g., from <span class="dynamic">${originalMean.toFixed(2)}</span> to <span class="dynamic">${adjustedMean.toFixed(2)}</span> units), minimizing <strong>schedule variance</strong>.</li>
                            <li><strong>Impact on Distribution and Probability</strong>: <strong>Increasing from 0% to <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span> shifts the distribution left</strong>, reducing the mean, individually increasing the <strong>target probability</strong> for <span class="dynamic">${targetValue.toFixed(2)}</span> (e.g., contributes to <span class="dynamic">${adjProb.toFixed(1)}%</span>) or reducing the value at <span class="dynamic">${confidenceLevel}%</span>.</li>
                            <li><strong>Mathematical Formula</strong>: Adjusts mean: \\(\\mu' = \\mu - f \\cdot (P - M) \\cdot (SF/100)\\), where \\(\\mu\\) = <span class="dynamic">${originalMean.toFixed(2)}</span>, \\(P\\) = <span class="dynamic">${worstCase}</span>, \\(M\\) = <span class="dynamic">${mostLikely}</span>, \\(SF\\) = <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span>, \\(f\\) = 0.5.</li>
                            <li><strong>Why It Helps</strong>: Reduces <strong>schedule delays</strong>, aiding <span class="dynamic">${targetValue.toFixed(2)}</span> for time-based estimates, improving the <span class="dynamic">${currentRiskLevel}</span> risk profile.</li>
                            <li><strong>Next Step</strong>: Increase to 50–60% (<span class="dynamic">${(worstCase * 1.5).toFixed(2)}</span>–<span class="dynamic">${(worstCase * 1.6).toFixed(2)}</span> units) and check the <strong>CDF chart</strong> for higher confidence at <span class="dynamic">${targetValue.toFixed(2)}</span>.</li>
                        </ul>
                    </li>
                    <li><strong>Scope Certainty</strong>
                        <ul>
                            <li><strong>What It Does</strong>: Reduces <strong>probability of scope creep</strong> by defining deliverables. At 100%, no <strong>scope creep</strong> anticipated; at <span class="dynamic">${sliderSettings.scopeCertainty}%</span>, <span class="dynamic">${(100 - sliderSettings.scopeCertainty).toFixed(0)}%</span> chance of scope increase.</li>
                            <li><strong>Potential Impact</strong>: Increasing from 0% to <span class="dynamic">${sliderSettings.scopeCertainty}%</span> narrows outcome range (e.g., variance drops by ~<span class="dynamic">${varianceReduction}%</span>), focusing on <span class="dynamic">${targetValue.toFixed(2)}</span>.</li>
                            <li><strong>Impact on Distribution and Probability</strong>: <strong>Increasing from 0% to <span class="dynamic">${sliderSettings.scopeCertainty}%</span> narrows the distribution</strong>, reducing variance, individually increasing the <strong>target probability</strong> for <span class="dynamic">${targetValue.toFixed(2)}</span> (e.g., contributes to <span class="dynamic">${adjProb.toFixed(1)}%</span>) by concentrating outcomes.</li>
                            <li><strong>Mathematical Formula</strong>: Scales variance: \\(\\sigma'^2 = \\sigma^2 \\cdot (1 - SC/100)\\), where \\(\\sigma^2\\) = <span class="dynamic">${originalVariance.toFixed(2)}</span>, \\(SC\\) = <span class="dynamic">${sliderSettings.scopeCertainty}%</span>. Probability of scope creep = <span class="dynamic">${(100 - sliderSettings.scopeCertainty).toFixed(0)}%</span>.</li>
                            <li><strong>Why It Helps</strong>: Prevents <strong>scope creep</strong>, ensuring predictability for <span class="dynamic">${targetValue.toFixed(2)}</span>, improving the <span class="dynamic">${currentRiskLevel}</span> risk profile.</li>
                            <li><strong>Next Step</strong>: Increase to 75% for <span class="dynamic">${(100 - 75).toFixed(0)}%</span> scope creep risk and check the <strong>PDF chart</strong> for a narrower distribution.</li>
                        </ul>
                    </li>
                    <li><strong>Tolerance for Poor Quality</strong>
                        <ul>
                            <li><strong>What It Does</strong>: Manages <strong>defects</strong> or <strong>quality trade-offs</strong>. At 100%, allows maximum <strong>defects</strong> or <strong>quality trade-offs</strong>; at 0%, prioritizes <strong>quality assurance</strong>.</li>
                            <li><strong>Potential Impact</strong>: Increasing from 0% to <span class="dynamic">${sliderSettings.qualityTolerance}%</span> shifts outcomes right (more chance of exceeding <span class="dynamic">${targetValue.toFixed(2)}</span>); decreasing below <span class="dynamic">${sliderSettings.qualityTolerance}%</span> reduces extreme outcomes.</li>
                            <li><strong>Impact on Distribution and Probability</strong>: <strong>Increasing from 0% to <span class="dynamic">${sliderSettings.qualityTolerance}%</span> shifts the distribution right</strong>, increasing skewness or upper bound, individually decreasing the <strong>target probability</strong> for <span class="dynamic">${targetValue.toFixed(2)}</span> (e.g., reduces from <span class="dynamic">${higherProb}%</span> to <span class="dynamic">${adjProb.toFixed(1)}%</span>). <strong>Decreasing</strong> reduces the right tail, increasing <strong>target probability</strong>.</li>
                            <li><strong>Mathematical Formula</strong>: Adjusts upper bound or skewness: \\(b' = b + (P - M) \\cdot (QT/100)\\), where \\(b\\) = <span class="dynamic">${worstCase}</span>, \\(QT\\) = <span class="dynamic">${sliderSettings.qualityTolerance}%</span>, \\(P\\) = <span class="dynamic">${worstCase}</span>, \\(M\\) = <span class="dynamic">${mostLikely}</span>.</li>
                            <li><strong>Why It Helps</strong>: Minimizes <strong>defects</strong> and overruns, ensuring reliable <span class="dynamic">${targetValue.toFixed(2)}</span>, improving the <span class="dynamic">${currentRiskLevel}</span> risk profile.</li>
                            <li><strong>Next Step</strong>: Decrease to 40–50% for <strong>quality assurance</strong> and check the <strong>CDF chart</strong> for reduced right tail (less chance of exceeding <span class="dynamic">${worstCase}</span>).</li>
                        </ul>
                    </li>
                    <li><strong>Combined Effect</strong>
                        <ul>
                            <li><strong>What It Does</strong>: Collectively adjusts the distribution based on all slider settings to achieve <span class="dynamic">${adjProb.toFixed(1)}%</span> for <span class="dynamic">${targetValue.toFixed(2)}</span> or <span class="dynamic">${valueAtConfidence.toFixed(2)}</span> at <span class="dynamic">${confidenceLevel}%</span>.</li>
                            <li><strong>Potential Impact</strong>: Combines individual shifts and narrowing to achieve <span class="dynamic">${adjProb.toFixed(1)}%</span>, reducing <strong>cost overruns</strong>, <strong>schedule delays</strong>, <strong>scope creep</strong>, and <strong>defects</strong>.</li>
                            <li><strong>Impact on Distribution and Probability</strong>: Combines all sliders’ effects, adjusting the mean, variance, and shape to achieve <span class="dynamic">${adjProb.toFixed(1)}%</span> for <span class="dynamic">${targetValue.toFixed(2)}</span> or <span class="dynamic">${valueAtConfidence.toFixed(2)}</span> at <span class="dynamic">${confidenceLevel}%</span>, as detailed in the <strong>Slider Combination Table</strong>.</li>
                            <li><strong>Mathematical Formula</strong>: Final mean and variance: \\(\\mu_{\\text{final}} = \\mu - f \\cdot (P - M) \\cdot (BF/100 + SF/100)\\), \\(\\sigma_{\\text{final}}^2 = \\sigma^2 \\cdot (1 - SC/100)\\), adjusted by \\(QT\\)-scaled upper bound, where \\(\\mu\\) = <span class="dynamic">${originalMean.toFixed(2)}</span>, \\(\\sigma^2\\) = <span class="dynamic">${originalVariance.toFixed(2)}</span>, \\(BF\\) = <span class="dynamic">${sliderSettings.budgetFlexibility}%</span>, \\(SF\\) = <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span>, \\(SC\\) = <span class="dynamic">${sliderSettings.scopeCertainty}%</span>, \\(QT\\) = <span class="dynamic">${sliderSettings.qualityTolerance}%</span>.</li>
                            <li><strong>Why It Helps</strong>: Delivers <span class="dynamic">${adjProb.toFixed(1)}%</span> for <span class="dynamic">${targetValue.toFixed(2)}</span>, improving the <span class="dynamic">${currentRiskLevel}</span> risk profile to <span class="dynamic">${optimalRiskLevel}</span>.</li>
                            <li><strong>Next Step</strong>: Adjust all sliders as recommended and check the <strong>Slider Combination Table</strong> (filter “Above 75%” or “Optimized”) for the final <span class="dynamic">${adjProb.toFixed(1)}%</span> or <span class="dynamic">${valueAtConfidence.toFixed(2)}</span>.</li>
                        </ul>
                    </li>
                </ul>

                <h5>Practical Example</h5>
                <p>For your project with estimates (Optimistic: <span class="dynamic">${bestCase}</span>, Most Likely: <span class="dynamic">${mostLikely}</span>, Pessimistic: <span class="dynamic">${worstCase}</span>) and a target of <span class="dynamic">${targetValue.toFixed(2)}</span> at <span class="dynamic">${confidenceLevel}%</span> confidence:</p>
                <ul>
                    <li><strong>Baseline Risk Profile</strong>: <span class="dynamic">${origProb.toFixed(1)}%</span> success probability (<span class="dynamic">${baselineRiskLevel}</span>), risking <strong>cost overruns</strong>, <strong>schedule delays</strong>, <strong>scope creep</strong>, or <strong>defects</strong>.</li>
                    <li><strong>Current Risk Profile</strong>: Your settings (<span class="dynamic">${sliderSettings.budgetFlexibility}%</span>, <span class="dynamic">${sliderSettings.scheduleFlexibility}%</span>, <span class="dynamic">${sliderSettings.scopeCertainty}%</span>, <span class="dynamic">${sliderSettings.qualityTolerance}%</span>) achieve <span class="dynamic">${adjProb.toFixed(1)}%</span> (<span class="dynamic">${currentRiskLevel}</span>).</li>
                    <li>To improve: Increase Budget Flexibility to 50–60% (<span class="dynamic">${(worstCase * 1.5).toFixed(2)}</span> units) to mitigate <strong>cost overruns</strong>, Scope Certainty to 75% for <span class="dynamic">${(100 - 75).toFixed(0)}%</span> <strong>scope creep</strong> risk, and decrease Tolerance for Poor Quality to 40–50% for <strong>quality assurance</strong>.</li>
                    <li>Check the <strong>Slider Combination Table</strong> (filter “Above 75%”) to confirm a <span class="dynamic">low risk</span> profile (<span class="dynamic">${adjProb.toFixed(1)}%</span> ≥ 75%). The <strong>PDF chart</strong> shows a tighter, left-shifted curve (mean at <span class="dynamic">${adjustedMean.toFixed(2)}</span>), and the <strong>CDF chart</strong> confirms higher confidence.</li>
                </ul>
            `;

            const recommendationsContent = document.getElementById('recommendations-content');
            if (recommendationsContent) {
                recommendationsContent.innerHTML = recommendationsText;
            }
        }

        function updateMetricsTable() {
            const task = document.getElementById('task-select')?.value || '';
            if (!task || !tasks[task] || !isValidTask(tasks[task]) || taskValidationError || !targetProbabilityData) {
                console.warn('Skipping metrics table update due to invalid task or missing data');
                return;
            }

            const a = tasks[task].optimistic || 1800;
            const m = tasks[task].mostLikely || 2400;
            const b = tasks[task].pessimistic || 3000;
            const pertMean = targetProbabilityData.pertMean?.value || (a + 4 * m + b) / 6;
            const triangleMean = targetProbabilityData.triangleMean?.value || (a + m + b) / 3;
            const betaMean = targetProbabilityData.betaMean?.value || (a + (b - a) * 2 / (2 + 5));
            const mcUnsmoothedMean = targetProbabilityData.mcMean?.value || m;
            const mcSmoothedMean = targetProbabilityData.mcSmoothedMean?.value || 2420.50;
            const mcSmoothedMedian = targetProbabilityData.mcSmoothedMedian?.value || 2420.50;
            const stdDev = targetProbabilityData.mcSmoothedStdDev?.value || 180.50;
            const variance = targetProbabilityData.mcSmoothedVariance?.value || 32580.25;
            const skewness = targetProbabilityData.mcSmoothedSkewness?.value || 0.05;
            const cv = targetProbabilityData.mcSmoothedCoefficientOfVariation?.value || 0.075;
            const ci = targetProbabilityData.mcSmoothedConfidenceInterval?.value || { lower: 2079.19, upper: 2761.81 };
            const var95 = targetProbabilityData.mcSmoothedVaR95?.value || 2520.00;
            const cvar95 = targetProbabilityData.mcSmoothedCVaR95?.value || var95;

            const elements = [
                { id: 'pert-a', value: a.toFixed(2) },
                { id: 'pert-m', value: m.toFixed(2) },
                { id: 'pert-b', value: b.toFixed(2) },
                { id: 'pert-mean', value: pertMean.toFixed(2) },
                { id: 'tri-a', value: a.toFixed(2) },
                { id: 'tri-m', value: m.toFixed(2) },
                { id: 'tri-b', value: b.toFixed(2) },
                { id: 'tri-mean', value: triangleMean.toFixed(2) },
                { id: 'beta-a', value: a.toFixed(2) },
                { id: 'beta-b', value: b.toFixed(2) },
                { id: 'beta-mean', value: betaMean.toFixed(2) },
                { id: 'mc-unsmoothed-mean', value: mcUnsmoothedMean.toFixed(2) },
                { id: 'mc-smoothed-mean-value', value: mcSmoothedMean.toFixed(2) },
                { id: 'mc-smoothed-mean', value: mcSmoothedMean.toFixed(2) },
                { id: 'mc-smoothed-median', value: mcSmoothedMedian.toFixed(2) },
                { id: 'std-mu', value: mcSmoothedMean.toFixed(2) },
                { id: 'std-dev', value: stdDev.toFixed(2) },
                { id: 'var-mu', value: mcSmoothedMean.toFixed(2) },
                { id: 'variance', value: variance.toFixed(2) },
                { id: 'skew-mu', value: mcSmoothedMean.toFixed(2) },
                { id: 'skew-sigma', value: stdDev.toFixed(2) },
                { id: 'skewness', value: skewness.toFixed(2) },
                { id: 'cv-sigma', value: stdDev.toFixed(2) },
                { id: 'cv-mu', value: mcSmoothedMean.toFixed(2) },
                { id: 'cv', value: cv.toFixed(3) },
                { id: 'ci-mu', value: mcSmoothedMean.toFixed(2) },
                { id: 'ci-sigma', value: stdDev.toFixed(2) },
                { id: 'ci', value: `[${ci.lower.toFixed(2)}, ${ci.upper.toFixed(2)}]` },
                { id: 'var-value', value: var95.toFixed(2) },
                { id: 'var', value: var95.toFixed(2) },
                { id: 'cvar-var', value: var95.toFixed(2) },
                { id: 'cvar', value: cvar95.toFixed(2) }
            ];

            elements.forEach(({ id, value }) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                } else {
                    console.warn(`Element with ID ${id} not found in DOM`);
                }
            });
        }

        function populateCombinationTable(page) {
            if (typeof page === 'undefined') page = 1;
            const combTable = document.getElementById('combination-table-body');
            if (!combTable) {
                console.error('Combination table body not found');
                return;
            }
            const filterValue = document.getElementById('probability-filter')?.value || 'current';
            const sliderValues = isOptimizeMode ? targetProbabilityData?.optimalData?.value?.optimalSliderSettings || window.sliderState : window.sliderState;

            console.log(`Populating combination table with filter: ${filterValue}, sliderValues:`, sliderValues);

            let combinations = targetProbabilityData?.sliderCombinations?.value || [];
            if (!combinations.length) {
                combTable.innerHTML = '<tr><td colspan="8">Error: Unable to load combination data due to API failure.</td></tr>';
                console.warn('No combinations available in targetProbabilityData');
                return;
            }

            let filteredCombinations = combinations;
            if (filterValue === 'above50') {
                filteredCombinations = combinations.filter(c => c.adjProb * 100 > 50);
            } else if (filterValue === 'above75') {
                filteredCombinations = combinations.filter(c => c.adjProb * 100 > 75);
            } else if (filterValue === 'below50') {
                filteredCombinations = combinations.filter(c => c.adjProb * 100 < 50);
            } else if (filterValue === 'current') {
                filteredCombinations = combinations.filter(c =>
                    Math.abs(c.bf - parseFloat(sliderValues.budgetFlexibility)) < 0.01 &&
                    Math.abs(c.sf - parseFloat(sliderValues.scheduleFlexibility)) < 0.01 &&
                    Math.abs(c.sc - parseFloat(sliderValues.scopeCertainty)) < 0.01 &&
                    Math.abs(c.rt - parseFloat(sliderValues.qualityTolerance)) < 0.01
                );
            } else if (filterValue === 'optimized' && targetProbabilityData?.optimalCombination?.value) {
                filteredCombinations = combinations.filter(c =>
                    Math.abs(c.bf - (targetProbabilityData.optimalCombination.value.budgetFlexibility || 0)) < 0.01 &&
                    Math.abs(c.sf - (targetProbabilityData.optimalCombination.value.scheduleFlexibility || 0)) < 0.01 &&
                    Math.abs(c.sc - (targetProbabilityData.optimalCombination.value.scopeCertainty || 0)) < 0.01 &&
                    Math.abs(c.rt - (targetProbabilityData.optimalCombination.value.qualityTolerance || 0)) < 0.01
                );
            }

            if (!filteredCombinations.length) {
                combTable.innerHTML = `<tr><td colspan="8">No combinations match the "${filterValue}" filter. Try adjusting sliders or selecting a different filter.</td></tr>`;
                console.warn(`No combinations matched filter: ${filterValue}`);
                return;
            }

            const pageSize = 50;
            const totalPages = Math.ceil(filteredCombinations.length / pageSize) || 1;
            const currentPage = Math.min(Math.max(1, page), totalPages);
            const start = (currentPage - 1) * pageSize;
            const end = start + pageSize;
            const pageCombinations = filteredCombinations.slice(start, end);

            combTable.innerHTML = `
                <tr><td colspan="8">Showing ${filterValue === 'current' ? 'Current Selection' : filterValue.charAt(0).toUpperCase() + filterValue.slice(1).replace(/([A-Z])/g, ' $1')} combinations.</td></tr>
                <tr style="background: #2c5282; color: white;">
                    <th>Combination</th><th>Budget Flex (%)</th><th>Schedule Flex (%)</th><th>Scope Cert (%)</th><th>Tol Poor Qual (%)</th><th>Probability (%)</th><th>Balance</th><th>Success Chance</th>
                </tr>
                ${pageCombinations.map(c => `
                    <tr>
                        <td>${filterValue === 'current' ? 'Current Selection' : filterValue === 'optimized' ? 'Optimized' : 'Combo'}</td>
                        <td>${c.bf}%</td>
                        <td>${c.sf}%</td>
                        <td>${c.sc}%</td>
                        <td>${c.rt}%</td>
                        <td>${(c.adjProb * 100).toFixed(1)}%</td>
                        <td>${c.bf === c.sf && c.sf === c.sc && c.sc === c.rt ? 'Balanced' : 'Unbalanced'}</td>
                        <td>${(c.adjProb * 100).toFixed(1)}% success, ${(100 - c.adjProb * 100).toFixed(1)}% failure</td>
                    </tr>
                `).join('')}
            `;

            const pageInfo = document.getElementById('page-info');
            if (pageInfo) pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;
            const prevPage = document.getElementById('prev-page');
            if (prevPage) {
                prevPage.disabled = currentPage === 1;
                prevPage.onclick = () => populateCombinationTable(currentPage - 1);
            }
            const nextPage = document.getElementById('next-page');
            if (nextPage) {
                nextPage.disabled = currentPage === totalPages;
                nextPage.onclick = () => populateCombinationTable(currentPage + 1);
            }
            const probabilityFilter = document.getElementById('probability-filter');
            if (probabilityFilter) probabilityFilter.onchange = () => populateCombinationTable(1);
        }
    </script>
</body>
</html>
